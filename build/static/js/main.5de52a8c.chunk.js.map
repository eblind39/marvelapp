{"version":3,"sources":["components/Characters/Banner/CharactersBanner.js","redux/Characters/charactersActionTypes.js","data/paginationData.js","data/apiKeys.js","data/baseUrl.js","redux/Characters/charactersActionCreators.js","redux/Comics/comicsActionTypes.js","redux/Comics/comicsActionCreators.js","redux/Stories/storiesActionTypes.js","redux/Stories/storiesActionCreators.js","components/Characters/SearchBar/CharactersSearchBar.js","components/Utils/LoadingComponent.js","components/Utils/NoDataFoundComponent.js","components/Utils/NoMoreDataComponent.js","redux/NavMenu/navmenuActionTypes.js","data/navmenuOptions.js","redux/NavMenu/navmenuActionCreators.js","components/Characters/List/CharacterCard.js","components/Utils/ScrollToTopPageComponent.js","components/Characters/List/CharactersList.js","components/NavMenu/NavMenu.js","components/Characters/CharactersIndex.js","components/Characters/Detail/CharacterCardDetailHeader.js","components/Characters/Detail/CharacterCardDetailComics.js","components/Characters/Detail/CharacterCardDetailStories.js","components/Characters/Detail/CharacterCardDetail.js","components/Characters/Detail/CharacterById.js","components/Characters/Favorites/CharacterFavoriteCard.js","components/Characters/Favorites/CharactersFavorites.js","components/Comics/Banner/ComicsBanner.js","components/Comics/List/ComicCard.js","components/Comics/List/ComicsList.js","components/Comics/SearchBar/ComicsSearchBar.js","components/Comics/ComicsIndex.js","components/Comics/Detail/ComicCardDetailHeader.js","components/Comics/Detail/ComicCardDetailCharacters.js","components/Comics/Detail/ComicCardDetailStories.js","components/Comics/Detail/ComicCardDetail.js","components/Comics/Detail/ComicById.js","components/Comics/Favorites/ComicFavoriteCard.js","components/Comics/Favorites/ComicsFavorites.js","components/Home/HomeComponent.js","components/Main/MainComponent.js","redux/Characters/charactersReducer.js","redux/Comics/comicsReducer.js","redux/Stories/storiesReducer.js","redux/NavMenu/navmenuReducer.js","App.js","redux/configureStore.js","reportWebVitals.js","index.js"],"names":["CharactersBanner","props","Fragment","Grid","style","background","paddingBottom","borderBottom","container","columns","doubling","textAlign","className","Image","src","size","CHARACTERS_ADD","CHARACTERS_ADD_BY_ID","CHARACTERS_ADD_COMICS_BY_CHARID","CHARACTERS_SET_COMICS_PAGE_NUMBER","CHARACTERS_ADD_STORIES_BY_CHARID","CHARACTERS_SET_STORIES_PAGE_NUMBER","CHARACTERS_LOADING","CHARACTERS_FAILED","CHARACTERS_INCREMENT_PAGE_NUMBER","CHARACTERS_SET_FILTERS","CHARACTERS_SET_ARRAY_FAVORITES","defaultPageSize","PRIVATE_KEY","PUBLIC_KEY","baseUrl","fetchCharacters","charactersState","pageNumber","characterNameFilter","comicIdFilter","storyIdFilter","orderByName","dispatch","charactersLoading","ts","Date","getTime","hash","MD5","toString","apiUrl","URL","params","apikey","offset","DefaultPaginationConsts","limit","nameStartsWith","comics","stories","orderBy","search","URLSearchParams","fetch","then","response","ok","error","Error","status","statusText","message","json","characters","data","results","arrTmp","filter","item","index","some","itemstt","id","addCharacters","total","catch","charactersFailed","fetchComicsByCharacterId","characterId","addComicsByCharacterId","fetchStoriesByCharacterId","addStoriesByCharacterId","setFavoritesArray","charactersFavorites","type","ActionTypes","payload","totalCharacters","addCharacterById","character","comicsTotalComics","storiesTotalStories","errmes","COMICS_ADD","COMICS_ADD_BY_ID","COMICS_ADD_SEARCH","COMICS_ADD_CHARACTERS_BY_COMICID","COMICS_SET_CHARACTERS_PAGE_NUMBER","COMICS_ADD_STORIES_BY_COMICID","COMICS_SET_STORIES_PAGE_NUMBER","COMICS_LOADING","COMICS_FAILED","COMICS_INCREMENT_PAGE_NUMBER","COMICS_SET_FILTERS","COMICS_SET_ARRAY_FAVORITES","fetchComics","comicsState","comicTitleFilter","comicFormatFilter","issueNumberFilter","filterByIssueNumber","isAutoComplete","comicsLoading","intLimit","titleStartsWith","formatType","issueNumber","addComicsForAutoComplete","addComics","comicsFailed","fetchCharactersByComicId","comicId","addCharactersByComicId","fetchStoriesByComicId","addStoriesByComicId","comicsFavorites","totalComics","addComicById","comic","charactersTotalCharacters","STORIES_ADD","STORIES_ADD_SEARCH","STORIES_LOADING","STORIES_FAILED","STORIES_INCREMENT_PAGE_NUMBER","STORIES_SET_FILTER_COMIC_ID","storiesLoading","addStories","addStoriesForAutoComplete","storiesFailed","CharactersSearchBar","useState","setCharacterNameFilter","setComicIdFilter","setStoryIdFilter","setOrderByName","storiesCombo","setStoriesCombo","orderNameComboOpts","setOrderNameComboOpts","useSelector","state","isComicsLoading","isLoadding","comicsAutoComplete","storiesAutoComplete","useDispatch","timeoutComicsRef","useRef","React","useEffect","key","value","text","clearTimeout","current","tmpArr","map","story","title","unshift","centered","verticalAlign","Form","Group","widths","padding","Row","Column","Field","control","Input","autoComplete","label","placeholder","onChange","e","target","Search","loading","resultRenderer","Label","content","onSearchChange","setTimeout","length","onResultSelect","fetchStories","result","Select","options","Button","width","primary","onClick","strCharacterNameFilter","strComicIdFilter","strStoryIdFilter","strOrderByName","setCharacterFilter","Loading","showif","zIndex","paddingTop","color","Icon","name","NoDataFound","NoMoreData","marginTop","marginBottom","fontSize","NAVMENU_SET_ACTIVE_OPTION","characterfavorites","comicfavorites","setActiveMenu","optionMenu","setActiveMenuOptions","isCharacters","MenuOptions","isCharacterFavorites","isComics","isComicFavorites","menuOptions","CharacterCard","isCharacterInFavs","setIsCharacterInFavs","srcImage","thumbnail","path","extension","includes","Card","as","Link","to","wrapped","fluid","ui","Content","Header","Meta","Intl","DateTimeFormat","year","month","day","format","parse","modified","Description","description","extra","animated","hidden","localArr","removeFromFavorites","addToFavorites","visible","ScrollToTopPage","isVisible","setIsVisible","toggleVisibility","window","pageYOffset","addEventListener","scrollTo","top","behavior","height","alt","CharactersList","lastElement","setLastElement","isLoading","errMess","totalPages","getCharacters","useCallback","observer","IntersectionObserver","entries","isIntersecting","currentElement","currentObserver","observe","unobserve","divided","ref","NavMenu","navmenu","Menu","Item","active","CharactersIndex","CharacterCardDetailHeader","history","useHistory","marginRight","margin","labelPosition","goBack","icon","Container","CharacterCardDetailComics","comicsTotalPages","paddingLeft","Pagination","onPageChange","event","activePage","CharacterCardDetailStories","storiesTotalPages","undefined","CharacterCardDetail","CharacterById","comicsByCharacter","storiesByCharacter","fetchCharacterById","CharacterFavoriteCard","CharactersFavorites","ComicsBanner","ComicCard","isComicInFavs","setIsComicInFavs","ComicsList","orderByIssueNumber","getComics","ComicsSearchBar","setComicTitleFilter","setComicFormatFilter","setIssueNumberFilter","setOrderByIssueNumber","orderIssueNumberComboOpts","setOrderIssueNumberComboOpts","formatsCombo","setFormatsCombo","comicFormatsObjs","strComicTitleFilter","strComicFormatFilter","strIssueNumberFilter","strOrderByIssueNumber","setComicFilters","ComicsIndex","ComicCardDetailHeader","ComicCardDetailCharacters","charactersTotalPages","ComicCardDetailStories","ComicCardDetail","ComicById","charactersByComic","storiesByComic","fetchComicById","ComicFavoriteCard","ComicsFavorites","Home","Main","component","exact","match","parseInt","Component","withRouter","Characters","errMes","comicsPageNumber","storiesPageNumber","action","Comics","charactersPageNumber","Stories","totalStories","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5de52a8c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, Image } from \"semantic-ui-react\";\n\nfunction CharactersBanner(props) {\n\n    return (\n        <React.Fragment>\n            <Grid \n                style={{ background: 'orange', paddingBottom: \"12px\", borderBottom: \"12px solid #cc8400\" }} \n                container \n                columns={2} \n                doubling \n                textAlign='center'\n                className=\"cropped-banner\" >\n                <Image \n                    src='/images/Marvel-Character-Banner.jpg' \n                    size='huge'\n                    className=\"full-banner\"\n                />\n            </Grid>\n        </React.Fragment>\n    );\n\n}\n\nexport default CharactersBanner;","export const CHARACTERS_ADD = 'CHARACTERS_ADD';\nexport const CHARACTERS_ADD_BY_ID = 'CHARACTERS_ADD_BY_ID';\nexport const CHARACTERS_ADD_COMICS_BY_CHARID = 'CHARACTERS_ADD_COMICS_BY_CHARID';\nexport const CHARACTERS_SET_COMICS_PAGE_NUMBER = 'CHARACTERS_SET_COMICS_PAGE_NUMBER';\nexport const CHARACTERS_ADD_STORIES_BY_CHARID = 'CHARACTERS_ADD_STORIES_BY_CHARID';\nexport const CHARACTERS_SET_STORIES_PAGE_NUMBER = 'CHARACTERS_SET_STORIES_PAGE_NUMBER';\nexport const CHARACTERS_LOADING = 'CHARACTERS_LOADING';\nexport const CHARACTERS_FAILED = 'CHARACTERS_FAILED';\nexport const CHARACTERS_INCREMENT_PAGE_NUMBER = 'CHARACTERS_INCREMENT_PAGE_NUMBER';\nexport const CHARACTERS_SET_FILTERS = 'CHARACTERS_SET_FILTERS';\nexport const CHARACTERS_SET_ARRAY_FAVORITES = 'CHARACTERS_SET_ARRAY_FAVORITES';","export const autocompletePageSize = 6;\nexport const defaultPageSize = 24;\nexport const tablePageSize = 3;","export const PRIVATE_KEY = 'd75d114903aa3cf3386b2146b1aa574555a4632b';\nexport const PUBLIC_KEY = '45a25817778990dd4f02aa0ffc241785';","export const baseUrl = 'https://gateway.marvel.com:443/v1/public/';\n","import * as ActionTypes from './charactersActionTypes';\nimport * as DefaultPaginationConsts from '../../data/paginationData';\nimport { PRIVATE_KEY, PUBLIC_KEY } from '../../data/apiKeys';\nimport { MD5 } from 'crypto-js';\nimport { baseUrl } from '../../data/baseUrl';\n\nexport const fetchCharacters = (charactersState, pageNumber, characterNameFilter, comicIdFilter, storyIdFilter, orderByName) => (dispatch) => {\n    dispatch(charactersLoading(true));\n\n    // you need a new time stamp for every request                                                                                    \n    let ts = new Date().getTime();\n    let hash = MD5(ts + PRIVATE_KEY + PUBLIC_KEY).toString();\n    let apiUrl = new URL(baseUrl + 'characters');\n    let params = { \n        apikey: PUBLIC_KEY, \n        hash: hash, \n        offset: (pageNumber * DefaultPaginationConsts.defaultPageSize), \n        limit: DefaultPaginationConsts.defaultPageSize\n    };\n    if (characterNameFilter) params.nameStartsWith = characterNameFilter;\n    if (comicIdFilter) params.comics = comicIdFilter;\n    if (storyIdFilter) params.stories = storyIdFilter;\n    if (orderByName) params.orderBy = orderByName;\n\n    apiUrl.search = new URLSearchParams(params).toString();\n\n    return fetch(apiUrl)\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    } else {\n                        let error = new Error('Error' + response.status + ': ' + response.statusText);\n                        error.response = response;\n                        throw error;\n                    }\n                },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                }\n            )\n            .then(response => response.json())\n            .then(characters => {\n                if (characters?.data?.results) {\n                    // verify if new characters.data.results are contained in charactersState\n                    let arrTmp = characters.data.results.filter((item, index) => !charactersState.some(itemstt => itemstt.id === item.id));\n                    dispatch(addCharacters(arrTmp, characters.data.total));\n                }\n            })\n            .catch(error => dispatch(charactersFailed(error.message)));\n}\n\nexport const fetchCharacterById = (characterId) => (dispatch) => {\n    dispatch(charactersLoading(true));\n\n    // you need a new time stamp for every request                                                                                    \n    let ts = new Date().getTime();\n    let hash = MD5(ts + PRIVATE_KEY + PUBLIC_KEY).toString();\n    let apiUrl = new URL(baseUrl + 'characters/' + characterId);\n    let params = { \n        apikey: PUBLIC_KEY, \n        hash: hash\n    };\n\n    apiUrl.search = new URLSearchParams(params).toString();\n\n    return fetch(apiUrl)\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    } else {\n                        let error = new Error('Error' + response.status + ': ' + response.statusText);\n                        error.response = response;\n                        throw error;\n                    }\n                },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                }\n            )\n            .then(response => response.json())\n            .then(character => {\n                if (character?.data?.results) {\n                    dispatch(addCharacterById(character.data.results[0]));\n                }\n            })\n            .catch(error => dispatch(charactersFailed(error.message)));\n}\n\nexport const fetchComicsByCharacterId = (pageNumber, characterId) => (dispatch) => {\n    dispatch(charactersLoading(true));\n\n    // you need a new time stamp for every request                                                                                    \n    let ts = new Date().getTime();\n    let hash = MD5(ts + PRIVATE_KEY + PUBLIC_KEY).toString();\n    let apiUrl = new URL(baseUrl + 'characters/' + characterId + '/comics');\n    let params = { \n        apikey: PUBLIC_KEY, \n        hash: hash,\n        offset: (pageNumber * DefaultPaginationConsts.tablePageSize), \n        limit: DefaultPaginationConsts.tablePageSize\n    };\n\n    apiUrl.search = new URLSearchParams(params).toString();\n\n    return fetch(apiUrl)\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    } else {\n                        let error = new Error('Error' + response.status + ': ' + response.statusText);\n                        error.response = response;\n                        throw error;\n                    }\n                },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                }\n            )\n            .then(response => response.json())\n            .then(comics => {\n                if (comics?.data?.results) {\n                    dispatch(addComicsByCharacterId(comics.data.results, comics.data.total));\n                }\n            })\n            .catch(error => dispatch(charactersFailed(error.message)));\n}\n\nexport const fetchStoriesByCharacterId = (pageNumber, characterId) => (dispatch) => {\n    dispatch(charactersLoading(true));\n\n    // you need a new time stamp for every request                                                                                    \n    let ts = new Date().getTime();\n    let hash = MD5(ts + PRIVATE_KEY + PUBLIC_KEY).toString();\n    let apiUrl = new URL(baseUrl + 'characters/' + characterId + '/stories');\n    let params = { \n        apikey: PUBLIC_KEY, \n        hash: hash,\n        offset: (pageNumber * DefaultPaginationConsts.tablePageSize), \n        limit: DefaultPaginationConsts.tablePageSize\n    };\n\n    apiUrl.search = new URLSearchParams(params).toString();\n\n    return fetch(apiUrl)\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    } else {\n                        let error = new Error('Error' + response.status + ': ' + response.statusText);\n                        error.response = response;\n                        throw error;\n                    }\n                },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                }\n            )\n            .then(response => response.json())\n            .then(stories => {\n                if (stories?.data?.results) {\n                    dispatch(addStoriesByCharacterId(stories.data.results, stories.data.total));\n                }\n            })\n            .catch(error => dispatch(charactersFailed(error.message)));\n}\n\nexport const addToFavorites = (charactersFavorites, character) => (dispatch) => {\n    let letFiltered = charactersFavorites.filter(item => item.id === character.id);\n    let localArr = (letFiltered.length > 0 ? [...charactersFavorites] : [...charactersFavorites, character]);\n    dispatch(setFavoritesArray(localArr));\n}\nexport const removeFromFavorites = (charactersFavorites, characterId) => (dispatch) => {\n    let localArr = charactersFavorites.filter(item => item.id !== characterId);\n    dispatch(setFavoritesArray(localArr));\n}\nexport const setFavoritesArray = (charactersFavorites) => ({\n    type: ActionTypes.CHARACTERS_SET_ARRAY_FAVORITES,\n    payload: charactersFavorites\n});\n\nexport const incPageNumber = () => ({\n    type: ActionTypes.CHARACTERS_INCREMENT_PAGE_NUMBER\n});\n\nexport const setCharacterFilter = (characterNameFilter, comicIdFilter, storyIdFilter, orderByName) => ({\n    type: ActionTypes.CHARACTERS_SET_FILTERS,\n    characterNameFilter: characterNameFilter,\n    comicIdFilter: comicIdFilter,\n    storyIdFilter: storyIdFilter,\n    orderByName: orderByName,\n    pageNumber: 0\n});\n\nexport const charactersLoading = () => ({\n    type: ActionTypes.CHARACTERS_LOADING\n});\n\nexport const addCharacters = (characters, total) => ({\n    type: ActionTypes.CHARACTERS_ADD,\n    payload: characters,\n    totalCharacters: total\n});\n\nexport const addCharacterById = (character) => ({\n    type: ActionTypes.CHARACTERS_ADD_BY_ID,\n    payload: character\n});\n\nexport const addComicsByCharacterId = (comics, total) => ({\n    type: ActionTypes.CHARACTERS_ADD_COMICS_BY_CHARID,\n    payload: comics,\n    comicsTotalComics: total\n});\n\nexport const setComicsPageNumber = () => ({\n    type: ActionTypes.CHARACTERS_SET_COMICS_PAGE_NUMBER\n});\n\nexport const addStoriesByCharacterId = (stories, total) => ({\n    type: ActionTypes.CHARACTERS_ADD_STORIES_BY_CHARID,\n    payload: stories,\n    storiesTotalStories: total\n});\n\nexport const setStoriesPageNumber = () => ({\n    type: ActionTypes.CHARACTERS_SET_STORIES_PAGE_NUMBER\n});\n\nexport const charactersFailed = (errmes) => ({\n    type: ActionTypes.CHARACTERS_FAILED,\n    payload: errmes\n});","export const COMICS_ADD = 'COMICS_ADD';\nexport const COMICS_ADD_BY_ID = 'COMICS_ADD_BY_ID';\nexport const COMICS_ADD_SEARCH = 'COMICS_ADD_SEARCH';\nexport const COMICS_ADD_CHARACTERS_BY_COMICID = 'COMICS_ADD_CHARACTERS_BY_COMICID';\nexport const COMICS_SET_CHARACTERS_PAGE_NUMBER = 'COMICS_SET_CHARACTERS_PAGE_NUMBER';\nexport const COMICS_ADD_STORIES_BY_COMICID = 'COMICS_ADD_STORIES_BY_COMICID';\nexport const COMICS_SET_STORIES_PAGE_NUMBER = 'COMICS_SET_STORIES_PAGE_NUMBER';\nexport const COMICS_LOADING = 'COMICS_LOADING';\nexport const COMICS_FAILED = 'COMICS_FAILED';\nexport const COMICS_INCREMENT_PAGE_NUMBER = 'COMICS_INCREMENT_PAGE_NUMBER';\nexport const COMICS_SET_FILTERS = 'COMICS_SET_FILTERS';\nexport const COMICS_SET_ARRAY_FAVORITES = 'COMICS_SET_ARRAY_FAVORITES';","import * as ActionTypes from '././comicsActionTypes';\nimport * as DefaultPaginationConsts from '../../data/paginationData';\nimport { PRIVATE_KEY, PUBLIC_KEY } from '../../data/apiKeys';\nimport { MD5 } from 'crypto-js';\nimport { baseUrl } from '../../data/baseUrl';\n\nexport const fetchComics = (comicsState, pageNumber, comicTitleFilter, comicFormatFilter, issueNumberFilter, filterByIssueNumber, isAutoComplete) => (dispatch) => {\n    dispatch(comicsLoading(true));\n    let intLimit = (isAutoComplete ? DefaultPaginationConsts.autocompletePageSize : DefaultPaginationConsts.defaultPageSize)\n\n    // you need a new time stamp for every request                                                                                    \n    let ts = new Date().getTime();\n    let hash = MD5(ts + PRIVATE_KEY + PUBLIC_KEY).toString();\n    let apiUrl = new URL(baseUrl + 'comics');\n    let params = { \n        apikey: PUBLIC_KEY, \n        hash: hash, \n        offset: (pageNumber * intLimit), \n        limit: intLimit\n    };\n    if (comicTitleFilter) params.titleStartsWith = comicTitleFilter;\n    if (comicFormatFilter) params.formatType = comicFormatFilter;\n    if (issueNumberFilter) params.issueNumber = issueNumberFilter;\n    if (filterByIssueNumber) params.orderBy = filterByIssueNumber;\n\n    apiUrl.search = new URLSearchParams(params).toString();\n\n    return fetch(apiUrl)\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    } else {\n                        let error = new Error('Error' + response.status + ': ' + response.statusText);\n                        error.response = response;\n                        throw error;\n                    }\n                },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                }\n            )\n            .then(response => response.json())\n            .then(comics => {\n                if (comics?.data?.results) {\n                    if (!isAutoComplete) {\n                        let arrTmp = comics.data.results.filter((item, index) => !comicsState.some(itemstt => itemstt.id === item.id));\n                        dispatch(addComics(arrTmp, comics.data.total));\n                    } else {\n                        dispatch(addComicsForAutoComplete(comics.data.results, comicTitleFilter, comicFormatFilter, issueNumberFilter));\n                    }\n                }\n            })\n            .catch(error => dispatch(comicsFailed(error.message)));\n}\n\nexport const fetchComicById = (comicId) => (dispatch) => {\n    dispatch(comicsLoading(true));\n\n    // you need a new time stamp for every request                                                                                    \n    let ts = new Date().getTime();\n    let hash = MD5(ts + PRIVATE_KEY + PUBLIC_KEY).toString();\n    let apiUrl = new URL(baseUrl + 'comics/' + comicId);\n    let params = { \n        apikey: PUBLIC_KEY, \n        hash: hash\n    };\n\n    apiUrl.search = new URLSearchParams(params).toString();\n\n    return fetch(apiUrl)\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    } else {\n                        let error = new Error('Error' + response.status + ': ' + response.statusText);\n                        error.response = response;\n                        throw error;\n                    }\n                },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                }\n            )\n            .then(response => response.json())\n            .then(comic => {\n                if (comic?.data?.results) {\n                    dispatch(addComicById(comic.data.results[0]));\n                }\n            })\n            .catch(error => dispatch(comicsFailed(error.message)));\n}\n\nexport const fetchCharactersByComicId = (pageNumber, comicId) => (dispatch) => {\n    dispatch(comicsLoading(true));\n\n    // you need a new time stamp for every request                                                                                    \n    let ts = new Date().getTime();\n    let hash = MD5(ts + PRIVATE_KEY + PUBLIC_KEY).toString();\n    let apiUrl = new URL(baseUrl + 'comics/' + comicId + '/characters');\n    let params = { \n        apikey: PUBLIC_KEY, \n        hash: hash,\n        offset: (pageNumber * DefaultPaginationConsts.tablePageSize), \n        limit: DefaultPaginationConsts.tablePageSize\n    };\n\n    apiUrl.search = new URLSearchParams(params).toString();\n\n    return fetch(apiUrl)\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    } else {\n                        let error = new Error('Error' + response.status + ': ' + response.statusText);\n                        error.response = response;\n                        throw error;\n                    }\n                },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                }\n            )\n            .then(response => response.json())\n            .then(characters => {\n                if (characters?.data?.results) {\n                    dispatch(addCharactersByComicId(characters.data.results, characters.data.total));\n                }\n            })\n            .catch(error => dispatch(comicsFailed(error.message)));\n}\n\nexport const fetchStoriesByComicId = (pageNumber, comicId) => (dispatch) => {\n    dispatch(comicsLoading(true));\n\n    // you need a new time stamp for every request                                                                                    \n    let ts = new Date().getTime();\n    let hash = MD5(ts + PRIVATE_KEY + PUBLIC_KEY).toString();\n    let apiUrl = new URL(baseUrl + 'comics/' + comicId + '/stories');\n    let params = { \n        apikey: PUBLIC_KEY, \n        hash: hash,\n        offset: (pageNumber * DefaultPaginationConsts.tablePageSize), \n        limit: DefaultPaginationConsts.tablePageSize\n    };\n\n    apiUrl.search = new URLSearchParams(params).toString();\n\n    return fetch(apiUrl)\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    } else {\n                        let error = new Error('Error' + response.status + ': ' + response.statusText);\n                        error.response = response;\n                        throw error;\n                    }\n                },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                }\n            )\n            .then(response => response.json())\n            .then(comics => {\n                if (comics?.data?.results) {\n                    dispatch(addStoriesByComicId(comics.data.results, comics.data.total));\n                }\n            })\n            .catch(error => dispatch(comicsFailed(error.message)));\n}\n\nexport const addToFavorites = (comicsFavorites, comic) => (dispatch) => {\n    let letFiltered = comicsFavorites.filter(item => item.id === comic.id);\n    let localArr = (letFiltered.length > 0 ? [...comicsFavorites] : [...comicsFavorites, comic]);\n    dispatch(setFavoritesArray(localArr));\n}\nexport const removeFromFavorites = (comicsFavorites, comicId) => (dispatch) => {\n    let localArr = comicsFavorites.filter(item => item.id !== comicId);\n    dispatch(setFavoritesArray(localArr));\n}\nexport const setFavoritesArray = (comicsFavorites) => ({\n    type: ActionTypes.COMICS_SET_ARRAY_FAVORITES,\n    payload: comicsFavorites\n});\n\nexport const incPageNumber = () => ({\n    type: ActionTypes.COMICS_INCREMENT_PAGE_NUMBER\n});\n\nexport const setComicFilters = (comicTitleFilter, comicFormatFilter, issueNumberFilter, orderByIssueNumber) => ({\n    type: ActionTypes.COMICS_SET_FILTERS,\n    comicTitleFilter: comicTitleFilter,\n    comicFormatFilter: comicFormatFilter,\n    issueNumberFilter: issueNumberFilter,\n    orderByIssueNumber: orderByIssueNumber,\n    pageNumber: 0\n});\n\nexport const comicsLoading = () => ({\n    type: ActionTypes.COMICS_LOADING\n});\n\nexport const addComics = (comics, total) => ({\n    type: ActionTypes.COMICS_ADD,\n    payload: comics,\n    totalComics: total,\n});\n\nexport const addComicsForAutoComplete = (comics, comicTitleFilter, comicFormatFilter, issueNumberFilter) => ({\n    type: ActionTypes.COMICS_ADD_SEARCH,\n    payload: comics,\n    comicTitleFilter: comicTitleFilter,\n    comicFormatFilter: comicFormatFilter,\n    issueNumberFilter: issueNumberFilter\n});\n\nexport const addComicById = (comic) => ({\n    type: ActionTypes.COMICS_ADD_BY_ID,\n    payload: comic\n});\n\nexport const addCharactersByComicId = (characters, total) => ({\n    type: ActionTypes.COMICS_ADD_CHARACTERS_BY_COMICID,\n    payload: characters,\n    charactersTotalCharacters: total\n});\n\nexport const setCharactersPageNumber = () => ({\n    type: ActionTypes.COMICS_SET_CHARACTERS_PAGE_NUMBER\n});\n\nexport const addStoriesByComicId = (stories, total) => ({\n    type: ActionTypes.COMICS_ADD_STORIES_BY_COMICID,\n    payload: stories,\n    storiesTotalStories: total\n});\n\nexport const setStoriesPageNumber = () => ({\n    type: ActionTypes.COMICS_SET_STORIES_PAGE_NUMBER\n});\n\nexport const comicsFailed = (errmes) => ({\n    type: ActionTypes.COMICS_FAILED,\n    payload: errmes\n});","export const STORIES_ADD = 'STORIES_ADD';\nexport const STORIES_ADD_SEARCH = 'STORIES_ADD_SEARCH';\nexport const STORIES_LOADING = 'STORIES_LOADING';\nexport const STORIES_FAILED = 'STORIES_FAILED';\nexport const STORIES_INCREMENT_PAGE_NUMBER = 'STORIES_INCREMENT_PAGE_NUMBER';\nexport const STORIES_SET_FILTER_COMIC_ID = 'STORIES_SET_FILTER_COMIC_ID';","import * as ActionTypes from '././storiesActionTypes';\nimport * as DefaultPaginationConsts from '../../data/paginationData';\nimport { PRIVATE_KEY, PUBLIC_KEY } from '../../data/apiKeys';\nimport { MD5 } from 'crypto-js';\nimport { baseUrl } from '../../data/baseUrl';\n\nexport const fetchStories = (pageNumber, comicId, isAutoComplete) => (dispatch) => {\n    dispatch(storiesLoading(true));\n    let intLimit = (isAutoComplete ? DefaultPaginationConsts.autocompletePageSize : DefaultPaginationConsts.defaultPageSize)\n\n    // you need a new time stamp for every request                                                                                    \n    let ts = new Date().getTime();\n    let hash = MD5(ts + PRIVATE_KEY + PUBLIC_KEY).toString();\n    let apiUrl = new URL(baseUrl + 'stories');\n    let params = { \n        apikey: PUBLIC_KEY, \n        hash: hash, \n        offset: (pageNumber * intLimit), \n        limit: intLimit\n    };\n    if (comicId) params.comics = comicId;\n\n    apiUrl.search = new URLSearchParams(params).toString();\n\n    return fetch(apiUrl)\n            .then(\n                response => {\n                    if (response.ok) {\n                        return response;\n                    } else {\n                        let error = new Error('Error' + response.status + ': ' + response.statusText);\n                        error.response = response;\n                        throw error;\n                    }\n                },\n                error => {\n                    let errmess = new Error(error.message);\n                    throw errmess;\n                }\n            )\n            .then(response => response.json())\n            .then(stories => {\n                if (stories?.data?.results) {\n                    if (!isAutoComplete)\n                        dispatch(addStories(stories.data.results, stories.data.total, comicId));\n                    else\n                        dispatch(addStoriesForAutoComplete(stories.data.results, comicId));\n                }\n            })\n            .catch(error => dispatch(storiesFailed(error.message)));\n}\n\nexport const incPageNumber = () => ({\n    type: ActionTypes.STORIES_INCREMENT_PAGE_NUMBER\n});\n\nexport const setComicId = (comicId) => ({\n    type: ActionTypes.STORIES_SET_FILTER_COMIC_ID,\n    payload: comicId,\n    pageNumber: 0\n});\n\nexport const storiesLoading = () => ({\n    type: ActionTypes.STORIES_LOADING\n});\n\nexport const addStories = (stories, total, comicId) => ({\n    type: ActionTypes.STORIES_ADD,\n    payload: stories,\n    totalComics: total,\n    comicId: comicId\n});\n\nexport const addStoriesForAutoComplete = (stories, comicId) => ({\n    type: ActionTypes.STORIES_ADD_SEARCH,\n    payload: stories,\n    comicId: comicId\n});\n\nexport const storiesFailed = (errmes) => ({\n    type: ActionTypes.STORIES_FAILED,\n    payload: errmes\n});","import React, { useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Grid, Form, Input, Button, Select, Search, Label } from \"semantic-ui-react\";\nimport { setCharacterFilter, fetchCharacters } from \"../../../redux/Characters/charactersActionCreators\";\nimport { fetchComics } from \"../../../redux/Comics/comicsActionCreators\";\nimport { fetchStories } from \"../../../redux/Stories/storiesActionCreators\";\n\nfunction CharactersSearchBar(props) {\n\tconst [characterNameFilter, setCharacterNameFilter] = useState(null);\n\tconst [comicIdFilter, setComicIdFilter] = useState(null);\n\tconst [storyIdFilter, setStoryIdFilter] = useState(null);\n\tconst [orderByName, setOrderByName] = useState(null);\n\tconst [storiesCombo, setStoriesCombo] = useState([]);\n\tconst [orderNameComboOpts, setOrderNameComboOpts] = useState([]);\n\tconst characters = useSelector((state) => state.characters.characters)\n\tconst comics = useSelector((state) => state.comics.comics)\n\tconst pageNumber = useSelector((state) => state.characters.pageNumber);\n\t// for comics\n\tconst isComicsLoading = useSelector((state) => state.comics.isLoadding);\n\tconst comicsAutoComplete = useSelector((state) => state.comics.comicsAutoComplete);\n\t// for stories\n\tconst isStoriesLoading = useSelector((state) => state.stories.isLoadding);\n\tconst storiesAutoComplete = useSelector((state) => state.stories.storiesAutoComplete);\n\tconst dispatch = useDispatch();\n\tconst timeoutComicsRef = useRef();\n\n\tconst doSearchCharacters = () => {\n\t\tlet strCharacterNameFilter = (characterNameFilter === \"\" ? null : characterNameFilter);\n\t\tlet strComicIdFilter = (comicIdFilter === \"\" ? null : comicIdFilter);\n\t\tlet strStoryIdFilter = (storyIdFilter === \"\" ? null : storyIdFilter);\n\t\tlet strOrderByName = (orderByName === \"\" ? null : orderByName);\n\t\t\n\t\tdispatch(setCharacterFilter(strCharacterNameFilter, strComicIdFilter, strStoryIdFilter, strOrderByName));\n\t\tdispatch(fetchCharacters(characters, pageNumber, strCharacterNameFilter, strComicIdFilter, strStoryIdFilter, strOrderByName));\n\t};\n\n\t// Start for comics autocomplete\n\tconst handleSearchComicsChange = (e, data) => {\n\t\tif (data.value === \"\") {\n\t\t\tsetComicIdFilter(null);\n\t\t\tsetStoriesCombo([]);\n\t\t} else {\n\t\t\tclearTimeout(timeoutComicsRef.current);\n\t\t\tdispatch(fetchComics(comics, 0, data.value, null, null, null, true));\n\n\t\t\ttimeoutComicsRef.current = setTimeout(() => {\n\t\t\t\tif (comicsAutoComplete.length === 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}, 300);\n\t\t}\n\t};\n\tReact.useEffect(() => {\n\t\tsetOrderNameComboOpts([\n\t\t\t{ key: '', value: '', text: '' },\n\t\t\t{ key: 'name', value: 'name', text: 'Ascending' },\n\t\t\t{ key: '-name', value: '-name', text: 'Descending' }\n\t\t]);\n\n\t\treturn () => {\n\t\t\tclearTimeout(timeoutComicsRef.current);\n\t\t};\n\t}, []);\n\t// End for comics autocomplete\n\n\tReact.useEffect(() => {\n\t\tlet tmpArr = storiesAutoComplete.map((story) => {\n\t\t\treturn {\n\t\t\t\tkey: story.id,\n\t\t\t\tvalue: story.id,\n\t\t\t\ttext: story.title,\n\t\t\t};\n\t\t});\n\t\ttmpArr.unshift({ key: '', value: '', text: '' });\n\t\tsetStoriesCombo(tmpArr);\n\t}, [storiesAutoComplete]);\n\n\tconst resultRenderer = ({ title }) => <Label content={title} />\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Grid\n                container\n                centered\n                verticalAlign=\"bottom\"\n\t\t\t\tstyle={{ background: \"orange\" }}\n\t\t\t\tcolumns={4}\n\t\t\t\tdoubling\n\t\t\t>\n\t\t\t\t<Form>\n\t\t\t\t\t<Form.Group widths=\"equal\">\n\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\tcontainer\n\t\t\t\t\t\t\tcentered\n\t\t\t\t\t\t\tverticalAlign=\"bottom\"\n\t\t\t\t\t\t\tstyle={{ background: \"orange\", padding: \"0 3em 0 3em\" }}\n\t\t\t\t\t\t\tcolumns={5}\n\t\t\t\t\t\t\tdoubling\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Form.Field\n\t\t\t\t\t\t\t\t\t\tcontrol={Input}\n\t\t\t\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t\t\t\tlabel=\"\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Name\"\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setCharacterNameFilter(e.target.value)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Form.Field\n\t\t\t\t\t\t\t\t\t\tcontrol={Search}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Comic\"\n\t\t\t\t\t\t\t\t\t\tloading={isComicsLoading}\n\t\t\t\t\t\t\t\t\t\tresultRenderer={resultRenderer}\n\t\t\t\t\t\t\t\t\t\tonSearchChange={handleSearchComicsChange}\n\t\t\t\t\t\t\t\t\t\tonResultSelect={(e, data) => {\n\t\t\t\t\t\t\t\t\t\t\tdispatch(fetchStories(0, data.result.id, true));\n\t\t\t\t\t\t\t\t\t\t\tsetComicIdFilter(data.result.id);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\tresults={comicsAutoComplete}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Form.Field\n\t\t\t\t\t\t\t\t\t\tcontrol={Select}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select a story\"\n\t\t\t\t\t\t\t\t\t\toptions={storiesCombo}\n\t\t\t\t\t\t\t\t\t\tonChange={(e, { value }) => {\n\t\t\t\t\t\t\t\t\t\t\tsetStoryIdFilter(value);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Form.Field\n\t\t\t\t\t\t\t\t\t\tcontrol={Select}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Order by name\"\n\t\t\t\t\t\t\t\t\t\toptions={orderNameComboOpts}\n\t\t\t\t\t\t\t\t\t\tonChange={(e, { value }) => setOrderByName(value)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\tprimary\n\t\t\t\t\t\t\t\t\t\tonClick={doSearchCharacters}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t</Grid.Row>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Form.Group>\n\t\t\t\t</Form>\n\t\t\t</Grid>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default CharactersSearchBar;\n","import React from 'react';\nimport { Icon } from 'semantic-ui-react';\n\nexport const Loading = ({showif}) => {\n    const styleContainer = {\n        zIndex: 899, \n        paddingTop: '4em',\n        color: '#ffffff'\n    }\n\n    return(\n        <React.Fragment>\n            {showif &&\n                <div style={styleContainer}>\n                    <Icon loading name='spinner' size='big' />\n                    <p>Loading...</p>\n                </div>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default Loading;","import React from 'react';\n\nexport const NoDataFound = ({showif}) => {\n    const styleContainer = {\n        zIndex: 899, \n        paddingTop: '4em'\n    }\n\n    const styleNoData = {\n        color: '#ffffff'\n    }\n\n    return(\n        <React.Fragment>\n            {showif &&\n                <div style={styleContainer}>\n                    <p style={styleNoData}>No data found...</p>\n                </div>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default NoDataFound;","import React from 'react';\n\nexport const NoMoreData = ({showif}) => {\n    const styleContainer = {\n        zIndex: 899, \n        paddingTop: '4em',\n        marginTop: '3em', \n        marginBottom: '3em', \n    }\n    \n    const styleNoMoreData = {\n        color: '#ffffff', \n        fontSize: \"1em\"\n    }\n\n    return(\n        <React.Fragment>\n            {showif &&\n                <div style={styleContainer}>\n                    <p style={styleNoMoreData}>No more data... ♥</p>\n                </div>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default NoMoreData;","export const NAVMENU_SET_ACTIVE_OPTION = 'NAVMENU_SET_ACTIVE_OPTION';","export const characters = 'characters';\nexport const characterfavorites = 'characterfavorites';\nexport const comics = 'comics';\nexport const comicfavorites = 'comicfavorites';","import * as ActionTypes from '././navmenuActionTypes';\nimport * as MenuOptions from '../../data/navmenuOptions';\n\nexport const setActiveMenu = (optionMenu) => (dispatch) => {\n    let tmpObj = {\n        isCharacters: (optionMenu===MenuOptions.characters),\n        isCharacterFavorites: (optionMenu===MenuOptions.characterfavorites),\n        isComics: (optionMenu===MenuOptions.comics),\n        isComicFavorites: (optionMenu===MenuOptions.comicfavorites),\n    };\n    dispatch(setActiveMenuOptions(tmpObj));\n}\n\nexport const setActiveMenuOptions = (menuOptions) => ({\n    type: ActionTypes.NAVMENU_SET_ACTIVE_OPTION,\n    isCharacters: menuOptions.isCharacters, \n    isCharacterFavorites: menuOptions.isCharacterFavorites, \n    isComics: menuOptions.isComics,\n    isComicFavorites: menuOptions.isComicFavorites\n});","import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from 'react-redux';\nimport { addToFavorites, removeFromFavorites } from \"../../../redux/Characters/charactersActionCreators\";\nimport { Card, Image, Button, Icon } from \"semantic-ui-react\";\nimport { Link } from 'react-router-dom';\n\nfunction CharacterCard({character, charactersFavorites}) {\n    const [isCharacterInFavs, setIsCharacterInFavs] = useState(false);\n    const dispatch = useDispatch();\n    let srcImage = `${ character.thumbnail.path }.${ character.thumbnail.extension }`;\n\n    const toggleFavorites = function() {\n        if (!isCharacterInFavs) {\n            dispatch(addToFavorites(charactersFavorites, character));\n            setIsCharacterInFavs(true);\n        } else {\n            dispatch(removeFromFavorites(charactersFavorites, character.id));\n            setIsCharacterInFavs(false);\n        }\n    }\n\n    useEffect(() => {\n        setIsCharacterInFavs(charactersFavorites ? charactersFavorites.includes(character) : false);\n    }, []);\n\n    return (\n        <Card className=\"character-card-default-height\">\n            <div\n                className=\"set-equal-height\"\n            >\n                <Image \n                    as={Link} \n                    to={`/characters/${character.id}`} \n                    src={srcImage} \n                    wrapped \n                    fluid\n                    ui={false} />\n            </div>\n            <Card.Content>\n                <Card.Header>{ character.name }</Card.Header>\n                <Card.Meta>\n                    <span className='date'>\n                        {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(character.modified)))}\n                    </span>\n                </Card.Meta>\n                <Card.Description className=\"limit-text-words\">\n                    { character.description }\n                </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                { character.id }\n            </Card.Content>\n            <Button animated='vertical'>\n                <Button.Content hidden \n                    onClick={toggleFavorites}>\n                    { isCharacterInFavs ? 'Remove from favorites' : 'Add to favorites' }\n                </Button.Content>\n                <Button.Content visible>\n                    <Icon name='heart' color={isCharacterInFavs ? \"red\" : \"grey\"} />\n                </Button.Content>\n            </Button>\n        </Card>\n    );\n}\n\nexport default CharacterCard;","import React, { useEffect, useState } from \"react\";\n\nfunction ScrollToTopPage() {\n    const [isVisible, setIsVisible] = useState(false);\n\n    // Show button when page is scorlled upto given distance\n    const toggleVisibility = () => {\n        if (window.pageYOffset > 300) {\n            setIsVisible(true);\n        } else {\n            setIsVisible(false);\n        }\n    };\n\n    // Set the top cordinate to 0\n    // make scrolling smooth\n    const scrollToTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: \"smooth\"\n        });\n    };\n\n    useEffect(() => {\n        window.addEventListener(\"scroll\", toggleVisibility);\n    }, []);\n\n    return (\n        <div className=\"scroll-to-top\">\n            {isVisible &&\n                <div onClick={scrollToTop}>\n                    <img \n                        style={{ width: \"70px\", height: \"70px\" }}\n                        src='https://www.pngkey.com/png/full/355-3553692_jump-to-the-top-scroll-to-top-icon.png' \n                        alt='Go to top' />\n                </div>}\n        </div>\n    );\n}\n\nexport default ScrollToTopPage;","import React, { useRef, useState } from \"react\";\nimport { useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Loading from \"../../Utils/LoadingComponent\";\nimport NoDataFound from \"../../Utils/NoDataFoundComponent\";\nimport NoMoreData from \"../../Utils/NoMoreDataComponent\";\nimport { fetchCharacters, incPageNumber } from \"../../../redux/Characters/charactersActionCreators\";\nimport { setActiveMenu } from '../../../redux/NavMenu/navmenuActionCreators';\nimport * as MenuOptions from '../../../data/navmenuOptions';\nimport { Grid } from \"semantic-ui-react\";\nimport CharacterCard from \"./CharacterCard\";\nimport ScrollToTopPage from \"../../Utils/ScrollToTopPageComponent\";\n\nfunction CharactersList(props) {\n    const [lastElement, setLastElement] = useState(null);\n    const isLoading = useSelector(state => state.characters.isLoading);\n    const errMess = useSelector(state => state.characters.errMess);\n    const pageNumber = useSelector(state => state.characters.pageNumber);\n    const characterNameFilter = useSelector(state => state.characters.characterNameFilter);\n    const comicIdFilter = useSelector(state => state.characters.comicIdFilter);\n    const storyIdFilter = useSelector(state => state.characters.storyIdFilter);\n    const orderByName = useSelector(state => state.characters.orderByName);\n    const characters = useSelector(state => state.characters.characters);\n    const totalPages = useSelector(state => state.characters.totalPages);\n    const totalCharacters = useSelector(state => state.characters.totalCharacters);\n    const charactersFavorites = useSelector(state => state.characters.charactersFavorites);\n    const dispatch = useDispatch();\n\n    const getCharacters = useCallback(() => {\n        dispatch(fetchCharacters(characters, pageNumber, characterNameFilter, comicIdFilter, storyIdFilter, orderByName));\n    }, [pageNumber, dispatch]);\n\n    useEffect(() => {\n        if (pageNumber <= totalPages) {\n            getCharacters();\n        }\n    }, [pageNumber, getCharacters]);\n\n    useEffect(() => {\n        dispatch(setActiveMenu(MenuOptions.characters));\n    }, []);\n\n    // Start infinite scroll\n    const observer = useRef(\n        new IntersectionObserver(\n            (entries) => {\n                const first = entries[0];\n                if (first.isIntersecting) {\n                    dispatch(incPageNumber());\n                }\n            })\n    );\n\n    useEffect(() => {\n        const currentElement = lastElement;\n        const currentObserver = observer.current;\n\n        if (currentElement) {\n            currentObserver.observe(currentElement);\n        }\n\n        return () => {\n            if (currentElement) {\n                currentObserver.unobserve(currentElement);\n            }\n        };\n    }, [lastElement]);\n    // end infinite scroll\n\n    return (\n        <React.Fragment>\n            <Grid\n                container\n                centered\n                style={{ background: \"orange\" }}\n                columns={4}\n                divided\n                doubling\n            >\n                {\n                    characters.map((character, index) => {\n                        if (index === characters.length - 1 && !isLoading && pageNumber <= totalPages)\n                            return (\n                                <div key={`${character.name}-${index}`}\n                                    ref={setLastElement} >\n                                    <Grid.Column key={character.id}>\n                                        <CharacterCard \n                                            character={character}\n                                            charactersFavorites={charactersFavorites}\n                                            isLoading={isLoading}\n                                            errMess={errMess}\n                                        />\n                                    </Grid.Column>\n                                </div>\n                            );\n                        else\n                            return (\n                                <Grid.Column key={character.id}>\n                                    <CharacterCard \n                                        character={character} \n                                        charactersFavorites={charactersFavorites}\n                                        isLoading={isLoading}\n                                        errMess={errMess}\n                                    />\n                                </Grid.Column>\n                            );\n                    })\n                }\n                <Grid.Row>\n                    <Loading showif={isLoading} />\n                    <NoDataFound showif={totalCharacters === 0 && !isLoading} />\n                    <NoMoreData showif={pageNumber - 1 === totalPages} />\n                    <ScrollToTopPage />\n                </Grid.Row>\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nexport default CharactersList;","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from 'react-router-dom';\nimport { Grid, Menu, Icon } from 'semantic-ui-react';\n\nfunction NavMenu(props) {\n    const isCharacters = useSelector(state => state.navmenu.isCharacters);\n    const isCharacterFavorites = useSelector(state => state.navmenu.isCharacterFavorites);\n    const isComics = useSelector(state => state.navmenu.isComics);\n    const isComicFavorites = useSelector(state => state.navmenu.isComicFavorites);\n\n    return (\n        <React.Fragment>\n                        <Grid\n                            container\n                            centered\n                            verticalAlign=\"middle\"\n                            style={{ background: \"orange\", padding: \"2em\" }}\n                            columns={1}\n                            doubling\n                        >\n                    <Menu \n                        style={{ width: \"80%\" }}\n                        className=\"custom-font\"\n                    >\n                        <Grid\n                            container\n                            centered\n                            verticalAlign=\"middle\"\n                            columns={4}\n                            doubling\n                        >\n                            <Grid.Row>\n                                <Grid.Column>\n                                    <Menu.Item\n                                        as={Link}\n                                        name='characters'\n                                        to='characters'\n                                        active={isCharacters}\n                                        className={isCharacters ? 'active-opt-menu' : 'inactive-opt-menu'}>\n                                        {/* <Icon name='user' /> */}\n                                        Characters\n                                    </Menu.Item>\n                                </Grid.Column>\n                                <Grid.Column>\n                                    <Menu.Item\n                                        as={Link}\n                                        name='comics'\n                                        to='comics'\n                                        active={isComics}\n                                        className={isComics ? 'active-opt-menu' : 'inactive-opt-menu'}>\n                                        {/* <Icon name='address book' /> */}\n                                        Comics\n                                    </Menu.Item>\n                                </Grid.Column>\n                                <Grid.Column>\n                                    <Menu.Item\n                                        as={Link}\n                                        name='charactersfavorites'\n                                        to='charactersfavorites'\n                                        active={isCharacterFavorites}\n                                        className={isCharacterFavorites ? 'active-opt-menu' : 'inactive-opt-menu'}>\n                                        {/* <Icon name='heart' /> */}\n                                        Character Favorites\n                                    </Menu.Item>\n                                </Grid.Column>\n                                <Grid.Column>\n                                    <Menu.Item\n                                        as={Link}\n                                        name='comicsfavorites'\n                                        to='comicsfavorites'\n                                        active={isComicFavorites}\n                                        className={isComicFavorites ? 'active-opt-menu' : 'inactive-opt-menu'}>\n                                        {/* <Icon name='heart' /> */}\n                                        Comic Favorites\n                                    </Menu.Item>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Menu>\n                    </Grid>\n        </React.Fragment>\n    );\n}\n\nexport default NavMenu;","import React from \"react\";\nimport CharactersBanner from \"./Banner/CharactersBanner\";\nimport CharactersSearchBar from \"./SearchBar/CharactersSearchBar\";\nimport CharactersList from \"./List/CharactersList\";\nimport NavMenu from '../NavMenu/NavMenu';\n\nfunction CharactersIndex(props) {\n    return (\n        <React.Fragment>\n            <NavMenu />\n            <CharactersBanner />\n            <CharactersSearchBar />\n            <CharactersList />\n        </React.Fragment>\n    );\n}\n\nexport default CharactersIndex;","import React from \"react\";\nimport { Container, Grid, Image, Card, Header, Button, Icon } from 'semantic-ui-react';\nimport { useHistory } from \"react-router\";\n\nfunction CharacterCardDetailHeader({character}) {\n    const history = useHistory();\n    let srcImage = `${ character?.thumbnail?.path }.${ character?.thumbnail?.extension }`;\n\n    return(\n        <Grid\n            container\n            centered\n            style={{ background: \"orange\", marginRight: \"12px\", marginTop: \"12px\" }}\n            columns={4}\n            divided\n            doubling\n        >\n            <Grid.Row\n                style={{ background: \"#181a1b\", color: \"rgba(232, 230, 227, 0.87)\", margin: \"12px\" }}\n            >\n                <Grid.Column width={6}>\n                    <Button\n                        as='div'\n                        labelPosition='right'\n                        onClick={(e) => { history.goBack(); }}>\n                        <Button icon>\n                            <Icon name='chevron left' />\n                            {' Back'}\n                        </Button>\n                    </Button>\n                </Grid.Column>\n                <Grid.Column width={10} centered style={{ margin: \"0 auto\" }}>\n                    <Header as=\"h1\">Character details</Header>\n                </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n                <Grid.Column width={6}>\n                    <Card>\n                        <Image src={srcImage} wrapped ui={false} />\n                        <Card.Content>\n                            <Card.Header>{character.name}</Card.Header>\n                        </Card.Content>\n                        <Card.Content centered extra>\n                            {character.id}\n                        </Card.Content>\n                    </Card>\n                </Grid.Column>\n                <Grid.Column width={10}>\n                    <Container>\n                        <p style={{ color: \"black\" }}>{character.description}</p>\n                    </Container>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}\n\nexport default CharacterCardDetailHeader;","import React from \"react\";\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from \"react-redux\";\nimport { fetchComicsByCharacterId, setComicsPageNumber } from \"../../../redux/Characters/charactersActionCreators\";\nimport { Container, Grid, Image, Pagination, Header } from 'semantic-ui-react';\n\nfunction CharacterCardDetailComics({character, comics, comicsTotalPages}) {\n    const dispatch = useDispatch();\n\n    return(\n        <Grid\n            container\n            centered\n            style={{ background: \"orange\", paddingLeft: \"12px\", marginTop: \"12px\" }}\n            columns={1}\n            divided\n            doubling\n        >\n            <Grid.Row>\n                <Grid.Column width={16}>\n\n                    <Grid\n                        columns={3}\n                        style={{ background: \"#181a1b\", color: \"rgba(232, 230, 227, 0.87)\", marginRight: \"6px\" }}\n                        divided\n                    >\n                        <Grid.Row centered>\n                            <Header as='h2'>Comics</Header>\n                        </Grid.Row>\n                        {\n                            (comics.length > 0) &&\n                            <Grid.Row>\n                                <Grid.Column width={4}></Grid.Column>\n                                <Grid.Column width={4}>\n                                    <Container>\n                                        <Header as=\"h4\">Title</Header>\n                                    </Container>\n                                </Grid.Column>\n                                <Grid.Column width={8}>\n                                    <Container>\n                                        <Header as=\"h4\">Description</Header>\n                                    </Container>\n                                </Grid.Column>\n                            </Grid.Row>\n                        }\n                        {\n                            comics &&\n                            comics.map((comic, index) => {\n                                let srcImage = `${comic?.thumbnail?.path}.${comic?.thumbnail?.extension}`;\n                                return (\n                                    <Grid.Row key={comic.id}>\n                                        <Grid.Column width={4}>\n                                            <Image as={Link} to={`/comics/${comic.id}`} src={srcImage} size=\"tiny\" />\n                                        </Grid.Column>\n                                        <Grid.Column width={4}>\n                                            <Container>\n                                                <p>{comic.title}</p>\n                                            </Container>\n                                        </Grid.Column>\n                                        <Grid.Column width={8}>\n                                            <Container>\n                                                <p>{comic.description}</p>\n                                            </Container>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                );\n                            })\n                        }\n                        <Grid.Row centered>\n                            {\n                                (comics.length > 0)\n                                    ?\n                                    <Pagination\n                                        totalPages={comicsTotalPages}\n                                        onPageChange={(event, data) => {\n                                            dispatch(setComicsPageNumber(data.activePage - 1));\n                                            dispatch(fetchComicsByCharacterId(data.activePage - 1, character.id));\n                                        }}\n                                    />\n                                    :\n                                    <p>No data.</p>\n                            }\n                        </Grid.Row>\n                    </Grid>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}\n\nexport default CharacterCardDetailComics;","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { fetchStoriesByCharacterId, setStoriesPageNumber } from \"../../../redux/Characters/charactersActionCreators\";\nimport { Container, Grid, Image, Pagination, Header } from 'semantic-ui-react';\n\nfunction CharacterCardDetailStories({character, stories, storiesTotalPages}) {\n    const dispatch = useDispatch();\n\n    return(\n        <Grid\n            container\n            centered\n            style={{ background: \"orange\", paddingLeft: \"12px\", marginTop: \"12px\" }}\n            columns={1}\n            divided\n            doubling\n        >\n            <Grid.Row>\n                <Grid.Column width={16}>\n                    <Grid\n                        columns={3}\n                        style={{ background: \"#181a1b\", color: \"rgba(232, 230, 227, 0.87)\", marginRight: \"6px\", marginTop: \"12px\", marginBottom: \"12px\" }}\n                        divided\n                    >\n                        <Grid.Row centered>\n                            <Header as='h2'>Stories</Header>\n                        </Grid.Row>\n                        {\n                            (stories.length > 0) &&\n                            <Grid.Row>\n                                <Grid.Column width={4}></Grid.Column>\n                                <Grid.Column width={4}>\n                                    <Container>\n                                        <Header as=\"h4\">Title</Header>\n                                    </Container>\n                                </Grid.Column>\n                                <Grid.Column width={8}>\n                                    <Container>\n                                        <Header as=\"h4\">Description</Header>\n                                    </Container>\n                                </Grid.Column>\n                            </Grid.Row>\n                        }\n                        {\n                            stories &&\n                            stories.map((story, index) => {\n                                let srcImage = `${story?.thumbnail?.path}.${story?.thumbnail?.extension}`;\n                                return (\n                                    <Grid.Row key={story.id}>\n                                        <Grid.Column width={4}>\n                                            {\n                                                (srcImage === null || srcImage === \"\" || srcImage === undefined || srcImage === \"undefined.undefined\")\n                                                    ?\n                                                    <Image src=\"/images/no-img.png\" size=\"tiny\" />\n                                                    :\n                                                    <Image src={srcImage} size=\"tiny\" />\n\n                                            }\n                                        </Grid.Column>\n                                        <Grid.Column width={4}>\n                                            <Container>\n                                                <p>{story.title}</p>\n                                            </Container>\n                                        </Grid.Column>\n                                        <Grid.Column width={8}>\n                                            <Container>\n                                                <p>{story.description}</p>\n                                            </Container>\n                                        </Grid.Column>\n                                    </Grid.Row>\n                                );\n                            })\n                        }\n                        <Grid.Row centered>\n                            {\n                                (stories.length > 0)\n                                    ?\n                                    <Pagination\n                                        totalPages={storiesTotalPages}\n                                        onPageChange={(event, data) => {\n                                            dispatch(setStoriesPageNumber(data.activePage - 1));\n                                            dispatch(fetchStoriesByCharacterId(data.activePage - 1, character.id));\n                                        }}\n                                    />\n                                    :\n                                    <p>No data.</p>\n                            }\n                        </Grid.Row>\n                    </Grid>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}\n\nexport default CharacterCardDetailStories;","import React from \"react\";\nimport CharacterCardDetailHeader from './CharacterCardDetailHeader';\nimport CharacterCardDetailComics from \"./CharacterCardDetailComics\";\nimport CharacterCardDetailStories from \"./CharacterCardDetailStories\";\n\nfunction CharacterCardDetail({character, comics, comicsTotalPages, stories, storiesTotalPages}) {\n    return(\n        <React.Fragment>\n            <CharacterCardDetailHeader\n                character={character}\n            />\n            <CharacterCardDetailComics\n                character={character}\n                comics={comics}\n                comicsTotalPages={comicsTotalPages}\n            />\n            <CharacterCardDetailStories\n                character={character}\n                stories={stories}\n                storiesTotalPages={storiesTotalPages}\n            />\n        </React.Fragment>\n    );\n}\n\nexport default CharacterCardDetail;","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchCharacterById, fetchComicsByCharacterId, fetchStoriesByCharacterId } from \"../../../redux/Characters/charactersActionCreators\";\nimport CharacterCardDetail from './CharacterCardDetail';\n\nfunction CharacterById({characterId}) {\n    const character = useSelector(state => state.characters.character);\n    const comicsByCharacter = useSelector(state => state.characters.comicsByCharacter);\n    const comicsTotalPages = useSelector(state => state.characters.comicsTotalPages);\n    const storiesByCharacter = useSelector(state => state.characters.storiesByCharacter);\n    const storiesTotalPages = useSelector(state => state.characters.storiesTotalPages);\n    const isLoading = useSelector(state => state.characters.isLoading);\n    const errMess = useSelector(state => state.characters.errMess);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (characterId === null) return;\n        dispatch(fetchCharacterById(characterId));\n        dispatch(fetchComicsByCharacterId(0, characterId));\n        dispatch(fetchStoriesByCharacterId(0, characterId));\n    }, [characterId, dispatch]);\n    \n    return(\n        <React.Fragment>\n            { \n                (character) &&\n                <CharacterCardDetail \n                        key={character.id}\n                        character={character} \n                        comics={comicsByCharacter}\n                        comicsTotalPages={comicsTotalPages}\n                        stories={storiesByCharacter}\n                        storiesTotalPages={storiesTotalPages}\n                        isLoading={isLoading}\n                        errMess={errMess}\n                />\n            }\n        </React.Fragment>\n    );\n}\n\nexport default CharacterById;","import React from \"react\";\nimport { Card, Image } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\n\nfunction CharacterFavoriteCard({character}) {\n    let srcImage = `${ character.thumbnail.path }.${ character.thumbnail.extension }`;\n\n    return (\n        <Card className=\"character-card-default-height\" style={{marginBottom: \"30px\"}}>\n            <div\n                className=\"set-equal-height\"\n            >\n                <Image \n                    as={Link} \n                    to={`/characters/${character.id}`} \n                    src={srcImage} \n                    wrapped \n                    fluid\n                    ui={false} />\n            </div>\n            <Card.Content>\n                <Card.Header>{ character.name }</Card.Header>\n                <Card.Meta>\n                    <span className='date'>\n                        {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(character.modified)))}\n                    </span>\n                </Card.Meta>\n                <Card.Description className=\"limit-text-words\">\n                    { character.description }\n                </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                { character.id }\n            </Card.Content>\n        </Card>\n    );\n}\n\nexport default CharacterFavoriteCard;","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Grid, Header } from \"semantic-ui-react\";\nimport NavMenu from \"../../NavMenu/NavMenu\";\nimport CharactersBanner from \"./../Banner/CharactersBanner\";\nimport { setActiveMenu } from '../../../redux/NavMenu/navmenuActionCreators';\nimport * as MenuOptions from '../../../data/navmenuOptions';\nimport NoDataFound from \"../../Utils/NoDataFoundComponent\";\nimport NoMoreData from \"../../Utils/NoMoreDataComponent\";\nimport CharacterFavoriteCard from './CharacterFavoriteCard';\n\nfunction CharactersFavorites(props) {\n    const charactersFavorites = useSelector(state => state.characters.charactersFavorites);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(setActiveMenu(MenuOptions.characterfavorites));\n    }, []);\n\n    return(\n        <React.Fragment>\n            <NavMenu />\n            <CharactersBanner />\n            <Grid\n                container\n                centered\n                style={{ background: \"orange\" }}\n                columns={4}\n                divided\n                doubling\n            >\n                <Grid.Row>\n                    <Header as='h2'>Favorite characters</Header>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        charactersFavorites.map((character, index) => {\n                            return (\n                                <Grid.Column key={character.id}>\n                                    <CharacterFavoriteCard\n                                        character={character}\n                                    />\n                                </Grid.Column>\n                            );\n                        })\n                    }\n                </Grid.Row>\n                <Grid.Row>\n                    <NoDataFound showif={charactersFavorites.length === 0} />\n                    <NoMoreData showif={charactersFavorites.length > 0} />\n                </Grid.Row>\n            </Grid>\n        </React.Fragment>\n    );\n}\n\nexport default CharactersFavorites;","import React from \"react\";\nimport { Grid, Image } from \"semantic-ui-react\";\n\nfunction ComicsBanner(props) {\n\n    return (\n        <React.Fragment>\n            <Grid \n                style={{ background: 'orange', paddingBottom: \"12px\", borderBottom: \"12px solid #cc8400\" }} \n                container \n                columns={2} \n                doubling \n                textAlign='center'\n                className=\"cropped-banner\" >\n                <Image \n                    src='/images/Marvel-Comics-Banner.jpg' \n                    size='huge'\n                    className=\"full-banner\"\n                />\n            </Grid>\n        </React.Fragment>\n    );\n\n}\n\nexport default ComicsBanner;","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { addToFavorites, removeFromFavorites } from \"../../../redux/Comics/comicsActionCreators\";\nimport { Card, Image, Button, Icon } from \"semantic-ui-react\";\nimport { useDispatch } from 'react-redux';\n\nfunction ComicCard({comic, comicsFavorites}) {\n    const [isComicInFavs, setIsComicInFavs] = useState(false);\n    const dispatch = useDispatch();\n    let srcImage = `${ comic.thumbnail.path }.${ comic.thumbnail.extension }`;\n\n    const toggleFavorites = function() {\n        if (!isComicInFavs) {\n            dispatch(addToFavorites(comicsFavorites, comic));\n            setIsComicInFavs(true);\n        } else {\n            dispatch(removeFromFavorites(comicsFavorites, comic.id));\n            setIsComicInFavs(false);\n        }\n    }\n\n    useEffect(() => {\n        setIsComicInFavs(comicsFavorites ? comicsFavorites.includes(comic) : false);\n    }, []);\n\n    return (\n        <Card className=\"comic-card-default-height\">\n            <div\n                className=\"set-equal-height\"\n            >\n                <Image \n                    as={Link} \n                    to={`/comics/${comic.id}`} \n                    src={srcImage} \n                    wrapped \n                    fluid\n                    ui={false} />\n            </div>\n            <Card.Content>\n                <Card.Header>{ comic.title }</Card.Header>\n                <Card.Meta>\n                </Card.Meta>\n                <Card.Description className=\"limit-text-words\">\n                    { comic.description }\n                </Card.Description>\n            </Card.Content>\n            {\n                (comic.issueNumber !== undefined) &&\n                <Card.Content extra>\n                    Issue number {comic?.issueNumber}\n                </Card.Content>\n            }\n            <Card.Content extra>\n                { comic.id }\n            </Card.Content>\n            <Button animated='vertical'>\n                <Button.Content hidden \n                    onClick={toggleFavorites}>\n                    { isComicInFavs ? 'Remove from favorites' : 'Add to favorites' }\n                </Button.Content>\n                <Button.Content visible>\n                    <Icon name='heart' color={isComicInFavs ? \"red\" : \"grey\"} />\n                </Button.Content>\n            </Button>\n        </Card>\n    );\n}\n\nexport default ComicCard;","import React, { useRef, useState } from \"react\";\nimport { useEffect, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Loading from \"../../Utils/LoadingComponent\";\nimport NoDataFound from \"../../Utils/NoDataFoundComponent\";\nimport NoMoreData from \"../../Utils/NoMoreDataComponent\";\nimport { fetchComics, incPageNumber } from \"../../../redux/Comics/comicsActionCreators\";\nimport { setActiveMenu } from '../../../redux/NavMenu/navmenuActionCreators';\nimport * as MenuOptions from '../../../data/navmenuOptions';\nimport { Grid } from \"semantic-ui-react\";\nimport ComicCard from './ComicCard';\nimport ScrollToTopPage from \"../../Utils/ScrollToTopPageComponent\";\n\nfunction ComicsList(props) {\n    const [lastElement, setLastElement] = useState(null);\n    const isLoading = useSelector(state => state.comics.isLoading);\n    const errMess = useSelector(state => state.comics.errMess);\n    const pageNumber = useSelector(state => state.comics.pageNumber);\n    const comicTitleFilter = useSelector(state => state.comics.comicTitleFilter);\n    const comicFormatFilter = useSelector(state => state.comics.comicFormatFilter);\n    const issueNumberFilter = useSelector(state => state.comics.issueNumberFilter);\n    const orderByIssueNumber = useSelector(state => state.comics.orderByIssueNumber);\n    const comics = useSelector(state => state.comics.comics);\n    const comicsFavorites = useSelector(state => state.comics.comicsFavorites);\n    const totalPages = useSelector(state => state.comics.totalPages);\n    const totalComics = useSelector(state => state.comics.totalComics);\n    const dispatch = useDispatch();\n\n    const getComics = useCallback(() => {\n        dispatch(fetchComics(comics, pageNumber, comicTitleFilter, comicFormatFilter, issueNumberFilter, orderByIssueNumber));\n    }, [pageNumber, dispatch]);\n\n    useEffect(() => {\n        if (pageNumber <= totalPages) {\n            getComics();\n        }\n    }, [pageNumber, getComics]);\n\n    // Start infinite scroll\n    const observer = useRef(\n        new IntersectionObserver(\n            (entries) => {\n                const first = entries[0];\n                if (first.isIntersecting) {\n                    dispatch(incPageNumber())\n                }\n            })\n    );\n\n    useEffect(() => {\n        const currentElement = lastElement;\n        const currentObserver = observer.current;\n\n        if (currentElement) {\n            currentObserver.observe(currentElement);\n        }\n\n        return () => {\n            if (currentElement) {\n                currentObserver.unobserve(currentElement);\n            }\n        };\n    }, [lastElement]);\n    // end infinite scroll\n\n    useEffect(() => {\n        dispatch(setActiveMenu(MenuOptions.comics));\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Grid\n                container\n                centered\n                style={{ background: \"orange\" }}\n                columns={4}\n                divided\n                doubling\n            >\n                {\n                    comics.map((comic, index) => {\n                        if (index === comics.length - 1 && !isLoading && pageNumber <= totalPages)\n                            return (\n                                <div key={`${comic.name}-${index}`}\n                                    ref={setLastElement} >\n                                    <Grid.Column key={comic.id}>\n                                        <ComicCard \n                                            comic={comic} \n                                            comicsFavorites={comicsFavorites}\n                                            isLoading={isLoading}\n                                            errMess={errMess}\n                                        />\n                                    </Grid.Column>\n                                </div>\n                            );\n                        else\n                            return (\n                                <Grid.Column key={comic.id}>\n                                    <ComicCard \n                                        comic={comic}\n                                        comicsFavorites={comicsFavorites}\n                                        isLoading={isLoading}\n                                        errMess={errMess}\n                                    />\n                                </Grid.Column>\n                            );\n                    })\n                }\n                <Grid.Row>\n                    <Loading showif={isLoading} />\n                    <NoDataFound showif={totalComics === 0 && !isLoading} />\n                    <NoMoreData showif={pageNumber - 1 === totalPages} />\n                    <ScrollToTopPage />\n                </Grid.Row>\n            </Grid>\n\n        </React.Fragment>\n    );\n}\n\nexport default ComicsList;","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Grid, Form, Input, Button, Select } from \"semantic-ui-react\";\nimport { setComicFilters, fetchComics } from \"../../../redux/Comics/comicsActionCreators\";\n\nfunction ComicsSearchBar(props) {\n\tconst [comicTitleFilter, setComicTitleFilter] = useState(null);\n\tconst [comicFormatFilter, setComicFormatFilter] = useState(null);\n\tconst [issueNumberFilter, setIssueNumberFilter] = useState(null);\n\tconst [orderByIssueNumber, setOrderByIssueNumber] = useState(null);\n\tconst [orderIssueNumberComboOpts, setOrderIssueNumberComboOpts] = useState([]);\n\tconst [formatsCombo, setFormatsCombo] = useState([]);\n\tconst comics = useSelector((state) => state.comics.comics);\n\tconst pageNumber = useSelector((state) => state.comics.pageNumber);\n\n\tconst dispatch = useDispatch();\n\n\tconst doSearchComics = () => {\n\t\tlet strComicTitleFilter = (comicTitleFilter === \"\" ? null : comicTitleFilter);\n\t\tlet strComicFormatFilter = (comicFormatFilter === \"\" ? null : comicFormatFilter);\n\t\tlet strIssueNumberFilter = (issueNumberFilter === \"\" ? null : issueNumberFilter);\n\t\tlet strOrderByIssueNumber = (orderByIssueNumber === \"\" ? null : orderByIssueNumber);\n\t\t\n\t\tdispatch(setComicFilters(strComicTitleFilter, strComicFormatFilter, strIssueNumberFilter));\n\t\tdispatch(fetchComics(comics, pageNumber, strComicTitleFilter, strComicFormatFilter, strIssueNumberFilter, strOrderByIssueNumber, false));\n\t};\n\n\tuseEffect(() => {\n\t\tlet comicFormats = ['', 'comic', 'collection'];\n\t\tlet comicFormatsObjs = comicFormats.map(format => ({\n\t\t\tkey: format,\n\t\t\tvalue: format,\n\t\t\ttext: format\t\t\t\n\t\t}));\n\t\tsetFormatsCombo(comicFormatsObjs);\n\n\t\tsetOrderIssueNumberComboOpts([\n\t\t\t{ key: '', value: '', text: '' },\n\t\t\t{ key: 'issueNumber', value: 'issueNumber', text: 'Ascending' },\n\t\t\t{ key: '-issueNumber', value: '-issueNumber', text: 'Descending' }\n\t\t]);\n\n\t}, []);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Grid\n                container\n                centered\n                verticalAlign=\"bottom\"\n\t\t\t\tstyle={{ background: \"orange\" }}\n\t\t\t\tcolumns={1}\n\t\t\t\tdoubling\n\t\t\t>\n\t\t\t\t<Form>\n\t\t\t\t\t<Form.Group widths=\"equal\">\n\t\t\t\t\t\t<Grid\n\t\t\t\t\t\t\tcontainer\n\t\t\t\t\t\t\tcentered\n\t\t\t\t\t\t\tverticalAlign=\"bottom\"\n\t\t\t\t\t\t\tstyle={{ background: \"orange\", padding: \"0 3em 0 3em\" }}\n\t\t\t\t\t\t\tcolumns={5}\n\t\t\t\t\t\t\tdoubling\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Grid.Row>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Form.Field\n\t\t\t\t\t\t\t\t\t\tcontrol={Input}\n\t\t\t\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t\t\t\tlabel=\"\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Title\"\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setComicTitleFilter(e.target.value)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Form.Field\n\t\t\t\t\t\t\t\t\t\tcontrol={Select}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Select a format\"\n\t\t\t\t\t\t\t\t\t\toptions={formatsCombo}\n\t\t\t\t\t\t\t\t\t\tonChange={(e, { value }) => setComicFormatFilter(value)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Form.Field\n\t\t\t\t\t\t\t\t\t\tcontrol={Input}\n\t\t\t\t\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\t\t\t\t\tlabel=\"\"\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Issue number\"\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => setIssueNumberFilter(e.target.value)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Form.Field\n\t\t\t\t\t\t\t\t\t\tcontrol={Select}\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"Order by issue number\"\n\t\t\t\t\t\t\t\t\t\toptions={orderIssueNumberComboOpts}\n\t\t\t\t\t\t\t\t\t\tonChange={(e, { value }) => setOrderByIssueNumber(value)}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t\t<Grid.Column>\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tstyle={{  }}\n\t\t\t\t\t\t\t\t\t\tprimary\n\t\t\t\t\t\t\t\t\t\tonClick={doSearchComics}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSearch\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</Grid.Column>\n\t\t\t\t\t\t\t</Grid.Row>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Form.Group>\n\t\t\t\t</Form>\n\t\t\t</Grid>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default ComicsSearchBar;\n","import React from \"react\";\nimport NavMenu from \"../NavMenu/NavMenu\";\nimport ComicsBanner from \"./Banner/ComicsBanner\";\nimport ComicsList from \"./List/ComicsList\";\nimport ComicsSearchBar from \"./SearchBar/ComicsSearchBar\";\n\nfunction ComicsIndex(props) {\n    return (\n        <React.Fragment>\n            <NavMenu />\n            <ComicsBanner />\n            <ComicsSearchBar />\n            <ComicsList />\n        </React.Fragment>\n    );\n}\n\nexport default ComicsIndex;","import React from \"react\";\nimport { Container, Grid, Image, Card, Header, Button, Icon } from 'semantic-ui-react';\nimport { useHistory } from \"react-router\";\n\nfunction ComicCardDetailHeader({comic}) {\n    const history = useHistory();\n\n    let srcImage = `${ comic?.thumbnail?.path }.${ comic?.thumbnail?.extension }`;\n\n    return (\n        <Grid\n            container\n            centered\n            style={{ background: \"orange\", marginRight: \"12px\", marginTop: \"12px\" }}\n            columns={4}\n            divided\n            doubling\n        >\n            <Grid.Row\n                style={{ background: \"#181a1b\", color: \"rgba(232, 230, 227, 0.87)\", margin: \"12px\" }}\n            >\n                <Grid.Column width={6}>\n                    <Button\n                        as='div'\n                        labelPosition='right'\n                        onClick={(e) => { history.goBack(); }}>\n                        <Button icon>\n                            <Icon name='chevron left' />\n                            {' Back'}\n                        </Button>\n                    </Button>\n                </Grid.Column>\n                <Grid.Column width={10} centered style={{ margin: \"0 auto\" }}>\n                    <Header as=\"h1\">Comic details</Header>\n                </Grid.Column>\n            </Grid.Row>\n\n            <Grid.Row>\n                <Grid.Column width={6}>\n                    <Card>\n                        <Image src={srcImage} wrapped ui={false} />\n                        <Card.Content>\n                            <Card.Header>{comic.title}</Card.Header>\n                        </Card.Content>\n                        {\n                            (comic?.issueNumber !== undefined) &&\n                            <Card.Content centered extra>\n                                Issue number {comic?.issueNumber}\n                            </Card.Content>\n                        }\n                        <Card.Content centered extra>\n                            {comic.id}\n                        </Card.Content>\n                    </Card>\n                </Grid.Column>\n                <Grid.Column width={10}>\n                    <Container>\n                        <p style={{ color: \"black\" }}>{comic.description}</p>\n                    </Container>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    );\n}\n\nexport default ComicCardDetailHeader;","import React from \"react\";\nimport { Container, Grid, Image, Pagination, Header } from 'semantic-ui-react';\nimport { fetchCharactersByComicId, setCharactersPageNumber } from '../../../redux/Comics/comicsActionCreators';\nimport { useDispatch } from \"react-redux\";\nimport { Link } from 'react-router-dom';\n\nfunction ComicCardDetailCharacters({comic, characters, charactersTotalPages}) {\n    const dispatch = useDispatch();\n\n    return (\n        <Grid\n        container\n        centered\n        style={{ background: \"orange\", paddingLeft: \"12px\", paddingBottom: \"12px\" }}\n        columns={1}\n        divided\n        doubling\n    >\n        <Grid.Row>\n            <Grid.Column width={16}>\n                <Grid\n                    columns={3}\n                    style={{ background: \"#181a1b\", color: \"rgba(232, 230, 227, 0.87)\", marginRight: \"6px\" }}\n                    divided\n                >\n                    <Grid.Row centered>\n                        <Header as='h2'>Characters</Header>\n                    </Grid.Row>\n                    {\n                        (characters.length > 0) &&\n                        <Grid.Row>\n                            <Grid.Column width={4}></Grid.Column>\n                            <Grid.Column width={4}>\n                                <Container>\n                                    <Header as=\"h4\">Name</Header>\n                                </Container>\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <Container>\n                                    <Header as=\"h4\">Description</Header>\n                                </Container>\n                            </Grid.Column>\n                        </Grid.Row>\n                    }\n                    {\n                        characters &&\n                        characters.map((character, index) => {\n                            let srcImage = `${character?.thumbnail?.path}.${character?.thumbnail?.extension}`;\n                            return (\n                                <Grid.Row key={character.id}>\n                                    <Grid.Column width={4}>\n                                        <Image as={Link} to={`/characters/${character.id}`} src={ srcImage } size=\"tiny\" />\n                                    </Grid.Column>\n                                    <Grid.Column width={4}>\n                                        <Container>\n                                            <p>{character.name}</p>\n                                        </Container>\n                                    </Grid.Column>\n                                    <Grid.Column width={8}>\n                                        <Container>\n                                            <p>{character.description}</p>\n                                        </Container>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            );\n                        })\n                    }\n                    <Grid.Row centered>\n                        {\n                            (characters.length > 0)\n                            ?\n                            <Pagination \n                                totalPages={charactersTotalPages ? charactersTotalPages : 1} \n                                onPageChange={(event, data) => {\n                                    dispatch(setCharactersPageNumber(data.activePage - 1)); \n                                    dispatch(fetchCharactersByComicId(data.activePage - 1, comic.id)); \n                                }} \n                            />\n                            :\n                            <p>No data.</p>\n                        }\n                    </Grid.Row>\n                </Grid>\n            </Grid.Column>\n        </Grid.Row>\n    </Grid>\n    );\n}\n\nexport default ComicCardDetailCharacters;","import React from \"react\";\nimport { Container, Grid, Image, Pagination, Header } from 'semantic-ui-react';\nimport { fetchStoriesByComicId, setStoriesPageNumber } from '../../../redux/Comics/comicsActionCreators';\nimport { useDispatch } from \"react-redux\";\n\nfunction ComicCardDetailStories({comic, stories, storiesTotalPages}) {\n    const dispatch = useDispatch();\n\n    return (\n        <Grid\n        container\n        centered\n        style={{ background: \"orange\", color: \"rgba(232, 230, 227, 0.87)\", paddingLeft: \"12px\", paddingBottom: \"12px\" }}\n        columns={1}\n        divided\n        doubling\n    >\n        <Grid.Row>\n            <Grid.Column width={16}>\n                <Grid\n                    columns={3}\n                    style={{ background: \"#181a1b\", marginRight: \"6px\" }}\n                    divided\n                >\n                    <Grid.Row centered>\n                        <Header as='h2'>Stories</Header>\n                    </Grid.Row>\n                    {\n                        (stories.length > 0) &&\n                        <Grid.Row>\n                            <Grid.Column width={4}></Grid.Column>\n                            <Grid.Column width={4}>\n                                <Container>\n                                    <Header as=\"h4\">Title</Header>\n                                </Container>\n                            </Grid.Column>\n                            <Grid.Column width={8}>\n                                <Container>\n                                    <Header as=\"h4\">Description</Header>\n                                </Container>\n                            </Grid.Column>\n                        </Grid.Row>\n                    }\n                    {\n                        stories &&\n                        stories.map((story, index) => {\n                            let srcImage = `${story?.thumbnail?.path}.${story?.thumbnail?.extension}`;\n                            return (\n                                <Grid.Row key={story.id}>\n                                    <Grid.Column width={4}>\n                                        {\n                                            (srcImage === null || srcImage === \"\" || srcImage === undefined || srcImage === \"undefined.undefined\")\n                                                ?\n                                                <Image src=\"/images/no-img.png\" size=\"tiny\" />\n                                                :\n                                                <Image src={srcImage} size=\"tiny\" />\n\n                                        }\n                                    </Grid.Column>\n                                    <Grid.Column width={4}>\n                                        <Container>\n                                            <p>{story.title}</p>\n                                        </Container>\n                                    </Grid.Column>\n                                    <Grid.Column width={8}>\n                                        <Container>\n                                            <p>{story.description}</p>\n                                        </Container>\n                                    </Grid.Column>\n                                </Grid.Row>\n                            );\n                        })\n                    }\n                    <Grid.Row centered>\n                        {\n                            (stories.length > 0)\n                                ?\n                                <Pagination\n                                    totalPages={storiesTotalPages ? storiesTotalPages : 1}\n                                    onPageChange={(event, data) => {\n                                        dispatch(setStoriesPageNumber(data.activePage - 1));\n                                        dispatch(fetchStoriesByComicId(data.activePage - 1, comic.id));\n                                    }}\n                                />\n                                :\n                                <p>No data. {storiesTotalPages}</p>\n                        }\n                    </Grid.Row>\n                </Grid>\n            </Grid.Column>\n        </Grid.Row>\n    </Grid>\n    );\n}\n\nexport default ComicCardDetailStories;","import React from \"react\";\nimport ComicCardDetailHeader from \"./ComicCardDetailHeader\";\nimport ComicCardDetailCharacters from \"./ComicCardDetailCharacters\";\nimport ComicCardDetailStories from \"./ComicCardDetailStories\";\n\nfunction ComicCardDetail({comic, characters, charactersTotalPages, stories, storiesTotalPages}) {\n    return (\n        <React.Fragment>\n            <ComicCardDetailHeader \n                comic={comic}\n            />\n            <ComicCardDetailCharacters\n                comic={comic}\n                characters={characters}\n                charactersTotalPages={charactersTotalPages}\n            />\n            <ComicCardDetailStories\n                comic={comic}\n                stories={stories}\n                storiesTotalPages={storiesTotalPages}\n            />\n        </React.Fragment>\n    );\n}\n\nexport default ComicCardDetail;","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchStoriesByComicId, fetchCharactersByComicId, fetchComicById } from '../../../redux/Comics/comicsActionCreators';\nimport ComicCardDetail from './ComicCardDetail';\n\nfunction ComicById({comicId}) {\n    const comic = useSelector(state => state.comics.comic);\n    const charactersByComic = useSelector(state => state.comics.charactersByComic);\n    const charactersTotalPages = useSelector(state => state.comics.charactersTotalPages);\n    const storiesByComic = useSelector(state => state.comics.storiesByComic);\n    const storiesTotalPages = useSelector(state => state.comics.storiesTotalPages);\n    const isLoading = useSelector(state => state.comics.isLoading);\n    const errMess = useSelector(state => state.comics.errMess);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if (comicId === null) return;\n        dispatch(fetchComicById(comicId));\n        dispatch(fetchCharactersByComicId(0, comicId));\n        dispatch(fetchStoriesByComicId(0, comicId));\n    }, [comicId, dispatch]);\n    \n    return(\n        <React.Fragment>\n            { \n                (comic) &&\n                <ComicCardDetail \n                        key={comic.id}\n                        comic={comic} \n                        characters={charactersByComic}\n                        charactersTotalPages={charactersTotalPages}\n                        stories={storiesByComic}\n                        storiesTotalPages={storiesTotalPages}\n                        isLoading={isLoading}\n                        errMess={errMess}\n                />\n            }\n        </React.Fragment>\n    );\n}\n\nexport default ComicById;","import React from \"react\";\nimport { Card, Image } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\n\nfunction ComicFavoriteCard({comic}) {\n    let srcImage = `${ comic.thumbnail.path }.${ comic.thumbnail.extension }`;\n\n    return (\n        <Card className=\"comic-card-default-height\" style={{marginBottom: \"30px\"}}>\n            <div\n                className=\"set-equal-height\"\n            >\n                <Image \n                    as={Link} \n                    to={`/comics/${comic.id}`} \n                    src={srcImage} \n                    wrapped \n                    fluid\n                    ui={false} />\n            </div>\n            <Card.Content>\n                <Card.Header>{comic.name}</Card.Header>\n                <Card.Meta>\n                </Card.Meta>\n                <Card.Description className=\"limit-text-words\">\n                    {comic.description}\n                </Card.Description>\n            </Card.Content>\n            <Card.Content centered extra>\n                {comic.id}\n            </Card.Content>\n        </Card>\n    );\n}\n\nexport default ComicFavoriteCard;","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Grid, Header } from \"semantic-ui-react\";\nimport NavMenu from \"../../NavMenu/NavMenu\";\nimport ComicsBanner from \"./../Banner/ComicsBanner\";\nimport { setActiveMenu } from '../../../redux/NavMenu/navmenuActionCreators';\nimport * as MenuOptions from '../../../data/navmenuOptions';\nimport NoDataFound from \"../../Utils/NoDataFoundComponent\";\nimport NoMoreData from \"../../Utils/NoMoreDataComponent\";\nimport ComicFavoriteCard from \"./ComicFavoriteCard\";\n\nfunction ComicsFavorites(props) {\n    const comicsFavorites = useSelector(state => state.comics.comicsFavorites);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(setActiveMenu(MenuOptions.comicfavorites));\n    }, []);\n\n    return(\n        <React.Fragment>\n            <NavMenu />\n            <ComicsBanner />\n            <Grid\n                container\n                centered\n                style={{ background: \"orange\" }}\n                columns={4}\n                divided\n                doubling\n            >\n                <Grid.Row>\n                    <Header as='h2'>Favorite comics</Header>\n                </Grid.Row>\n                <Grid.Row>\n                    {\n                        comicsFavorites.map((comic, index) => {\n                            return (\n                                <Grid.Column key={comic.id}>\n                                    <ComicFavoriteCard\n                                        comic={comic}\n                                    />\n                                </Grid.Column>\n                            );\n                        })\n                    }\n                </Grid.Row>\n                <Grid.Row>\n                    <NoDataFound showif={comicsFavorites.length === 0} />\n                    <NoMoreData showif={comicsFavorites.length > 0} />\n                </Grid.Row>\n            </Grid>\n\n        </React.Fragment>\n    );\n}\n\nexport default ComicsFavorites;","import React from \"react\";\nimport CharactersIndex from \"../Characters/CharactersIndex\";\n\nfunction Home(props) {\n\n    return (\n        <React.Fragment>\n            <CharactersIndex />\n        </React.Fragment>\n    );\n\n}\n\nexport default Home;","import React, { Component } from \"react\";\nimport { Route, Switch, withRouter, Redirect } from \"react-router-dom\";\nimport CharactersIndex from \"../Characters/CharactersIndex\";\nimport CharacterById from '../Characters/Detail/CharacterById';\nimport CharactersFavorites from \"../Characters/Favorites/CharactersFavorites\";\nimport ComicsIndex from \"../Comics/ComicsIndex\";\nimport ComicById from '../Comics/Detail/ComicById';\nimport ComicsFavorites from '../Comics/Favorites/ComicsFavorites';\nimport Home from \"../Home/HomeComponent\";\n\nclass Main extends Component {\n\n    render() {\n        const CharacterByIdRoute = ({match}) => {\n            return (\n                <CharacterById \n                    characterId={parseInt(match.params.characterId, 10)}\n                />\n            );\n        }\n\n        const ComicByIdRoute = ({match}) => {\n            return (\n                <ComicById \n                    comicId={parseInt(match.params.comicId, 10)}\n                />\n            );\n        }\n\n        return(\n            <div>\n                <Switch>\n                    <Route path=\"/home\" component={() => <Home />} />\n                    <Route exact path=\"/characters\" component={() => <CharactersIndex />} />\n                    <Route exact path=\"/characters/:characterId\" component={CharacterByIdRoute} />\n                    <Route exact path=\"/charactersfavorites\" component={() => <CharactersFavorites />} />\n                    <Route exact path=\"/comics\" component={() => <ComicsIndex />} />\n                    <Route exact path=\"/comics/:comicId\" component={ComicByIdRoute} />\n                    <Route exact path=\"/comicsfavorites\" component={() => <ComicsFavorites />} />\n                    <Redirect to=\"/home\" />\n                </Switch>\n            </div>\n        );\n    }\n\n}\n\nexport default withRouter(Main);","import * as ActionTypes from './charactersActionTypes';\nimport * as DefaultPaginationConsts from '../../data/paginationData';\n\nexport const Characters = (state = {\n                                        isLoading: false,\n                                        errMes: null,\n                                        characters: [],\n                                        character: {},\n                                        comicsByCharacter: [],\n                                        comicsPageNumber: 0,\n                                        comicsTotalPages: 0,\n                                        comicsTotalComics: 0,\n                                        storiesByCharacter: [],\n                                        storiesPageNumber: 0,\n                                        storiesTotalPages: 0,\n                                        storiesTotalStories: 0,\n                                        charactersFavorites: [],\n                                        pageNumber: 0,\n                                        totalCharacters: 0,\n                                        totalPages: 0,\n                                        characterNameFilter: null,\n                                        comicIdFilter: null,\n                                        storyIdFilter: null,\n                                        orderByName: null\n                                    },\n                           action) => {\n                               switch (action.type) {\n                                    case ActionTypes.CHARACTERS_ADD:\n                                        return {\n                                                ...state, \n                                                isLoading: false, \n                                                errMes: null, \n                                                characters: [...state.characters, ...action.payload],\n                                                totalCharacters: action.totalCharacters,\n                                                totalPages: parseInt(action.totalCharacters / DefaultPaginationConsts.defaultPageSize),\n                                                characterNameFilter: state.characterNameFilter,\n                                                comicIdFilter: state.comicIdFilter,\n                                                storyIdFilter: state.storyIdFilter,\n                                                orderByName: state.orderByName,\n                                                pageNumber: state.pageNumber\n                                               }\n                                    case ActionTypes.CHARACTERS_ADD_BY_ID:\n                                        return {\n                                                ...state, \n                                                isLoading: false, \n                                                errMes: null, \n                                                character: action.payload\n                                               }\n                                    case ActionTypes.CHARACTERS_ADD_COMICS_BY_CHARID:\n                                        return {\n                                                ...state,\n                                                isLoading: false, \n                                                errMes: null, \n                                                comicsByCharacter: action.payload, \n                                                comicsTotalComics: action.comicsTotalComics, \n                                                comicsTotalPages: parseInt(action.comicsTotalComics / DefaultPaginationConsts.tablePageSize),\n                                                comicsPageNumber: state.comicsPageNumber\n                                               }\n                                    case ActionTypes.CHARACTERS_ADD_STORIES_BY_CHARID:\n                                        return {\n                                                ...state,\n                                                isLoading: false, \n                                                errMes: null, \n                                                storiesByCharacter: action.payload, \n                                                storiesTotalStories: action.storiesTotalStories, \n                                                storiesTotalPages: parseInt(action.storiesTotalStories / DefaultPaginationConsts.tablePageSize),\n                                                storiesPageNumber: state.comicsPageNumber\n                                                }\n                                    case ActionTypes.CHARACTERS_LOADING:\n                                        return {...state, isLoading: true, errMes: null, characterNameFilter: state.characterNameFilter}\n                                    case ActionTypes.CHARACTERS_FAILED:\n                                        return {...state, isLoading: false, errMes: action.payload}\n                                    case ActionTypes.CHARACTERS_INCREMENT_PAGE_NUMBER:\n                                        return {...state, pageNumber: state.pageNumber + 1}\n                                    case ActionTypes.CHARACTERS_SET_COMICS_PAGE_NUMBER:\n                                        return {...state, comicsPageNumber: action.payload}\n                                    case ActionTypes.CHARACTERS_SET_STORIES_PAGE_NUMBER:\n                                        return {...state, storiesPageNumber: action.payload}\n                                    case ActionTypes.CHARACTERS_SET_FILTERS:\n                                        return {\n                                                ...state, \n                                                isLoading: false, \n                                                errMes: null, \n                                                characters: [], \n                                                totalCharacters: 0,\n                                                totalPages: 0, \n                                                characterNameFilter: action.characterNameFilter,\n                                                comicIdFilter: action.comicIdFilter,\n                                                storyIdFilter: action.storyIdFilter,\n                                                orderByName: action.orderByName,\n                                                pageNumber: action.pageNumber,\n                                               }\n                                    case ActionTypes.CHARACTERS_SET_ARRAY_FAVORITES:\n                                        return { ...state, charactersFavorites: action.payload }\n                                    default:\n                                        return state;\n                               }\n                           }","import * as ActionTypes from './comicsActionTypes';\nimport * as DefaultPaginationConsts from '../../data/paginationData';\n\nexport const Comics = (state = {\n                                    isLoading: false,\n                                    errMes: null,\n                                    comics: [],\n                                    comic: {},\n                                    comicsAutoComplete: [],\n                                    charactersByComic: [],\n                                    charactersPageNumber: 0,\n                                    charactersTotalPages: 0,\n                                    charactersTotalCharacters: 0,\n                                    storiesByComic: [],\n                                    storiesPageNumber: 0,\n                                    storiesTotalPages: 0,\n                                    storiesTotalStories: 0,\n                                    comicsFavorites: [],\n                                    pageNumber: 0,\n                                    totalComics: 0,\n                                    totalPages: 0,\n                                    comicTitleFilter: null,\n                                    comicFormatFilter: null,\n                                    issueNumberFilter: null,\n                                    orderByIssueNumber: null\n                                },\n                           action) => {\n                               switch (action.type) {\n                                    case ActionTypes.COMICS_ADD:\n                                        return {\n                                                ...state, \n                                                isLoading: false, \n                                                errMes: null, \n                                                comics: [...state.comics, ...action.payload],\n                                                totalComics: action.totalComics,\n                                                totalPages: parseInt(action.totalComics / DefaultPaginationConsts.defaultPageSize),\n                                                comicTitleFilter: state.comicTitleFilter,\n                                                comicFormatFilter: state.comicFormatFilter,\n                                                issueNumberFilter: state.issueNumberFilter,\n                                                orderByIssueNumber: state.orderByIssueNumber,\n                                                pageNumber: state.pageNumber\n                                               }\n                                   case ActionTypes.COMICS_ADD_BY_ID:\n                                       return {\n                                                ...state, \n                                                isLoading: false, \n                                                errMes: null, \n                                                comic: action.payload \n                                              }\n                                   case ActionTypes.COMICS_ADD_CHARACTERS_BY_COMICID:\n                                       return {\n                                           ...state,\n                                           isLoading: false, \n                                           errMes: null, \n                                           charactersByComic: action.payload,\n                                           charactersTotalCharacters: action.charactersTotalCharacters,\n                                           charactersTotalPages: parseInt(action.charactersTotalCharacters / DefaultPaginationConsts.tablePageSize),\n                                           charactersPageNumber: state.charactersPageNumber\n                                       }\n                                   case ActionTypes.COMICS_ADD_STORIES_BY_COMICID:\n                                       return {\n                                           ...state,\n                                           isLoading: false, \n                                           errMes: null, \n                                           storiesByComic: action.payload,\n                                           storiesTotalStories: action.storiesTotalStories,\n                                           storiesTotalPages: parseInt(action.storiesTotalStories / DefaultPaginationConsts.tablePageSize),\n                                           storiesPageNumber: state.comicsPageNumber\n                                       }\n                                    case ActionTypes.COMICS_ADD_SEARCH:\n                                        return {\n                                                ...state, \n                                                isLoading: false,\n                                                errMes: null, \n                                                comicsAutoComplete: action.payload,\n                                                comicTitleFilter: action.comicTitleFilter,\n                                                comicFormatFilter: action.comicFormatFilter,\n                                                issueNumberFilter: action.issueNumberFilter\n                                                }\n                                    case ActionTypes.COMICS_LOADING:\n                                        return {...state, isLoading: true, errMes: null, comicTitleFilter: state.comicTitleFilter}\n                                    case ActionTypes.COMICS_FAILED:\n                                        return {...state, isLoading: false, errMes: action.payload}\n                                    case ActionTypes.COMICS_INCREMENT_PAGE_NUMBER:\n                                        return {...state, pageNumber: state.pageNumber + 1}\n                                    case ActionTypes.COMICS_SET_CHARACTERS_PAGE_NUMBER:\n                                        return {...state, charactersPageNumber: action.payload}\n                                    case ActionTypes.COMICS_SET_STORIES_PAGE_NUMBER:\n                                        return {...state, storiesPageNumber: action.payload}\n                                    case ActionTypes.COMICS_SET_FILTERS:\n                                        return {\n                                                ...state, \n                                                isLoading: false, \n                                                errMes: null, \n                                                comics: [], \n                                                totalComics: 0, \n                                                totalPages: 0, \n                                                comicTitleFilter: action.comicTitleFilter,\n                                                comicFormatFilter: action.comicFormatFilter,\n                                                issueNumberFilter: action.issueNumberFilter,\n                                                orderByIssueNumber: action.orderByIssueNumber,\n                                                pageNumber: action.pageNumber\n                                               }\n                                    case ActionTypes.COMICS_SET_ARRAY_FAVORITES:\n                                        return { ...state, comicsFavorites: action.payload }\n                                    default:\n                                        return state;\n                               }\n                           }","import * as ActionTypes from './storiesActionTypes';\n\nexport const Stories = (state = {\n                                    isLoading: false,\n                                    errMes: null,\n                                    stories: [],\n                                    storiesAutoComplete: [],\n                                    pageNumber: 0,\n                                    totalStories: 0,\n                                    totalPages: 0,\n                                    comicId: null\n                                },\n                                action) => {\n                               switch (action.type) {\n                                    case ActionTypes.STORIES_ADD:\n                                        return {\n                                                ...state, \n                                                isLoading: false, \n                                                errMes: null, \n                                                stories: [...state.stories, ...action.payload],\n                                                totalStories: action.totalStories,\n                                                totalPages: parseInt(action.totalStories / 20),\n                                                comicId: action.comicId,\n                                                pageNumber: state.pageNumber\n                                               }\n                                    case ActionTypes.STORIES_ADD_SEARCH:\n                                    return {\n                                            ...state, \n                                            isLoading: false, \n                                            errMes: null, \n                                            storiesAutoComplete: action.payload,\n                                            comicId: action.comicId\n                                           }\n                                    case ActionTypes.STORIES_LOADING:\n                                        return {...state, isLoading: true, errMes: null, comicId: state.comicId}\n                                    case ActionTypes.STORIES_FAILED:\n                                        return {...state, isLoading: false, errMes: action.payload}\n                                    case ActionTypes.STORIES_INCREMENT_PAGE_NUMBER:\n                                        return {...state, pageNumber: state.pageNumber + 1}\n                                    case ActionTypes.STORIES_SET_FILTER_COMIC_ID:\n                                        return {\n                                                ...state, \n                                                isLoading: false, \n                                                errMes: null, \n                                                stories: [], \n                                                totalStories: 0, \n                                                totalPages: 0, \n                                                comicId: action.payload,\n                                                pageNumber: action.pageNumber\n                                               }\n                                    default:\n                                        return state;\n                               }\n                           }","import * as ActionTypes from './navmenuActionTypes';\n\nexport const NavMenu = (state = {\n                                    isCharacters: false,\n                                    isCharacterFavorites: false,\n                                    isComics: false,\n                                    isComicFavorites: false,\n                                },\n                                action) => {\n                               switch (action.type) {\n                                    case ActionTypes.NAVMENU_SET_ACTIVE_OPTION:\n                                        return {\n                                            ...state, \n                                            isCharacters: action.isCharacters, \n                                            isCharacterFavorites: action.isCharacterFavorites, \n                                            isComics: action.isComics,\n                                            isComicFavorites: action.isComicFavorites\n                                        }\n                                    default:\n                                        return state;\n                               }\n                           }","// import logo from './logo.svg';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport Main from './components/Main/MainComponent';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Component } from 'react';\n\nconst store = ConfigureStore();\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <BrowserRouter>\n                    <div className=\"App\">\n                        <Main />\n                    </div>\n                </BrowserRouter>\n            </Provider>\n        );\n    }\n}\n\nexport default App;\n","// import { createStoreHook, } from \"react-redux\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Characters } from \"./Characters/charactersReducer\";\nimport { Comics } from \"./Comics/comicsReducer\";\nimport { Stories } from \"./Stories/storiesReducer\";\nimport { NavMenu } from \"./NavMenu/navmenuReducer\";\nimport logger from \"redux-logger\";\nimport thunk from 'redux-thunk';\n\nexport const ConfigureStore = () => {\n    const store = createStore(\n        combineReducers({\n            characters: Characters,\n            comics: Comics,\n            stories: Stories,\n            navmenu: NavMenu\n        }),\n        applyMiddleware(thunk, logger)\n    );\n\n    return store;\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}